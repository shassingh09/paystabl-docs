"use strict";(self.webpackChunkpaystabl_docs=self.webpackChunkpaystabl_docs||[]).push([[507],{3820:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"integrations/mcp","title":"MCP Server Integration","description":"Integrate PayStabl with Claude via the Model Context Protocol (MCP) server. This enables Claude to make autonomous payments for APIs and services directly through chat interactions.","source":"@site/docs/integrations/mcp.mdx","sourceDirName":"integrations","slug":"/integrations/mcp","permalink":"/integrations/mcp","draft":false,"unlisted":false,"editUrl":"https://github.com/paystabl/docs/tree/main/docs/integrations/mcp.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"System Architecture","permalink":"/architecture"},"next":{"title":"LangGraph Integration","permalink":"/integrations/langgraph"}}');var t=a(4848),i=a(8453);const s={},l="MCP Server Integration",o={},c=[{value:"Quick Setup",id:"quick-setup",level:2},{value:"Available Tools",id:"available-tools",level:2},{value:"<code>pay_for_api</code>",id:"pay_for_api",level:3},{value:"<code>pay_agent</code>",id:"pay_agent",level:3},{value:"<code>check_balance</code>",id:"check_balance",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Custom Agent Setup",id:"custom-agent-setup",level:3},{value:"Claude Desktop Integration",id:"claude-desktop-integration",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Premium API Access",id:"premium-api-access",level:3},{value:"Agent Collaboration",id:"agent-collaboration",level:3},{value:"Multi-Step Workflows",id:"multi-step-workflows",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Insufficient Funds",id:"insufficient-funds",level:3},{value:"Policy Violations",id:"policy-violations",level:3},{value:"API Errors",id:"api-errors",level:3},{value:"Security Features",id:"security-features",level:2},{value:"Transaction Logging",id:"transaction-logging",level:3},{value:"Policy Enforcement",id:"policy-enforcement",level:3},{value:"Audit Trail",id:"audit-trail",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"MCP Server Not Starting",id:"mcp-server-not-starting",level:3},{value:"Payment Failures",id:"payment-failures",level:3},{value:"Claude Integration Issues",id:"claude-integration-issues",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Agent Wallet Management",id:"agent-wallet-management",level:3},{value:"User Communication",id:"user-communication",level:3},{value:"Error Recovery",id:"error-recovery",level:3},{value:"Related Documentation",id:"related-documentation",level:2},{value:"Support",id:"support",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"mcp-server-integration",children:"MCP Server Integration"})}),"\n",(0,t.jsx)(n.p,{children:"Integrate PayStabl with Claude via the Model Context Protocol (MCP) server. This enables Claude to make autonomous payments for APIs and services directly through chat interactions."}),"\n",(0,t.jsx)(n.h2,{id:"quick-setup",children:"Quick Setup"}),"\n",(0,t.jsx)(n.p,{children:"Install the PayStabl MCP server:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install -g @paystabl/mcp-server\n"})}),"\n",(0,t.jsx)(n.p,{children:"Configure Claude Desktop to use the server:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "paystabl": {\n      "command": "paystabl-mcp-server",\n      "args": ["--agent-id", "claude-assistant"],\n      "env": {\n        "PAYSTABL_API_KEY": "your-api-key-here"\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"available-tools",children:"Available Tools"}),"\n",(0,t.jsx)(n.h3,{id:"pay_for_api",children:(0,t.jsx)(n.code,{children:"pay_for_api"})}),"\n",(0,t.jsx)(n.p,{children:"Automatically handle HTTP 402 payment requests:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"User: \"Get the premium weather data for London\"\nClaude: I'll get the premium weather data for you.\n\n[Uses pay_for_api tool internally]\n- Calls weather API\n- Receives 402 Payment Required  \n- Automatically pays via PayStabl\n- Retries request with payment header\n- Returns weather data\n\nHere's the current weather in London: [data]\nPayment: $0.25 (Receipt: tx_abc123)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"pay_agent",children:(0,t.jsx)(n.code,{children:"pay_agent"})}),"\n",(0,t.jsx)(n.p,{children:"Send payments to other agents:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'User: "Pay the summarization agent $0.50 for the report"\nClaude: I\'ll send the payment to the summarization agent.\n\n[Uses pay_agent tool]\nPayment sent successfully!\n- Amount: $0.50\n- Recipient: summarization_agent_001\n- Transaction: 0x1234...\n- Purpose: Report summarization service\n'})}),"\n",(0,t.jsx)(n.h3,{id:"check_balance",children:(0,t.jsx)(n.code,{children:"check_balance"})}),"\n",(0,t.jsx)(n.p,{children:"View current wallet balance:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'User: "What\'s my agent balance?"\nClaude: [Uses check_balance tool]\n\nYour agent wallet currently has:\n- Balance: 2.45 ETH ($4,850.32)\n- Available for payments: $4,800.00\n- Reserved funds: $50.32\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"custom-agent-setup",children:"Custom Agent Setup"}),"\n",(0,t.jsx)(n.p,{children:"Create a specialized agent configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// paystabl-config.js\nmodule.exports = {\n  agentId: "claude-premium",\n  policies: {\n    dailyLimit: "100.00",\n    perCallLimit: "5.00", \n    allowedDomains: [\n      "api.openweathermap.org",\n      "api.premium-data.com",\n      "summarization-agent.com"\n    ],\n    requireApproval: {\n      threshold: "10.00"\n    }\n  },\n  integrations: {\n    enableX402: true,\n    enableAgentPayments: true,\n    logTransactions: true\n  }\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"Start the MCP server with the config:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"paystabl-mcp-server --config ./paystabl-config.js\n"})}),"\n",(0,t.jsx)(n.h3,{id:"claude-desktop-integration",children:"Claude Desktop Integration"}),"\n",(0,t.jsx)(n.p,{children:"Full configuration for Claude Desktop:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "mcpServers": {\n    "paystabl": {\n      "command": "node",\n      "args": [\n        "/usr/local/lib/node_modules/@paystabl/mcp-server/dist/index.js",\n        "--agent-id", "claude-assistant",\n        "--config", "./paystabl-config.js"\n      ],\n      "env": {\n        "PAYSTABL_API_KEY": "your-api-key",\n        "PAYSTABL_NETWORK": "base-sepolia"\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(n.h3,{id:"premium-api-access",children:"Premium API Access"}),"\n",(0,t.jsx)(n.p,{children:"Claude can automatically handle paid API requests:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"User: \"Analyze this PDF document for me\"\n\nClaude: I'll analyze the PDF using a premium document processing service.\n\n[Internally:]\n1. Attempts to call PDF analysis API\n2. Receives 402 Payment Required ($2.50)\n3. Uses pay_for_api to generate payment\n4. Retries request with X-Payment header\n5. Receives analysis results\n\nHere's the analysis of your PDF document:\n[Analysis results...]\n\nPayment processed: $2.50 (Transaction: 0x5678...)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"agent-collaboration",children:"Agent Collaboration"}),"\n",(0,t.jsx)(n.p,{children:"Claude can pay other agents for specialized tasks:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"User: \"Get a legal review of this contract\"\n\nClaude: I'll send this contract to our legal analysis agent for review.\n\n[Uses pay_agent to compensate legal agent]\nPayment sent: $15.00 to legal_review_agent\n\n[Receives legal analysis]\nHere's the legal review of your contract:\n[Detailed legal analysis...]\n\nPayment completed successfully.\n"})}),"\n",(0,t.jsx)(n.h3,{id:"multi-step-workflows",children:"Multi-Step Workflows"}),"\n",(0,t.jsx)(n.p,{children:"Claude can orchestrate complex paid workflows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"User: \"Create a research report on AI trends\"\n\nClaude: I'll create a comprehensive research report using multiple specialized services:\n\n1. Gathering data from premium research APIs...\n   \u2713 Paid $3.00 for market data access\n   \n2. Getting industry analysis...\n   \u2713 Paid analysis_agent $5.00 for trend analysis\n   \n3. Generating visualizations...\n   \u2713 Paid chart_agent $2.00 for data visualization\n   \n4. Professional formatting...\n   \u2713 Paid formatting_agent $1.50 for document layout\n\nTotal spent: $11.50\n\nHere's your comprehensive AI trends research report:\n[Complete formatted report with charts and analysis]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"The MCP server includes robust error handling:"}),"\n",(0,t.jsx)(n.h3,{id:"insufficient-funds",children:"Insufficient Funds"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Claude: I attempted to access the premium data service, but your agent wallet has insufficient funds. \n\nCurrent balance: $0.45\nRequired payment: $2.50\n\nPlease fund your agent wallet to continue.\n"})}),"\n",(0,t.jsx)(n.h3,{id:"policy-violations",children:"Policy Violations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Claude: The payment request ($25.00) exceeds your daily limit of $20.00. \n\nWould you like me to:\n1. Request approval for this higher amount\n2. Use a different service with lower cost\n3. Split the request into smaller parts\n"})}),"\n",(0,t.jsx)(n.h3,{id:"api-errors",children:"API Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Claude: I encountered an issue with the payment processing:\n\nError: The target API doesn't support x402 protocol\nAlternative: I can try a different service that supports PayStabl payments.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"security-features",children:"Security Features"}),"\n",(0,t.jsx)(n.h3,{id:"transaction-logging",children:"Transaction Logging"}),"\n",(0,t.jsx)(n.p,{children:"All payments are logged with full context:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": "2024-01-15T10:30:00Z",\n  "agentId": "claude-assistant", \n  "action": "pay_for_api",\n  "amount": "2.50",\n  "recipient": "api.premium-service.com",\n  "purpose": "PDF document analysis",\n  "txHash": "0x1234...",\n  "userContext": "User requested PDF analysis",\n  "success": true\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"policy-enforcement",children:"Policy Enforcement"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Daily spending limits"}),"\n",(0,t.jsx)(n.li,{children:"Per-transaction limits"}),"\n",(0,t.jsx)(n.li,{children:"Domain allowlists"}),"\n",(0,t.jsx)(n.li,{children:"Approval workflows for large payments"}),"\n",(0,t.jsx)(n.li,{children:"Time-based restrictions"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"audit-trail",children:"Audit Trail"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'User: "Show me my recent payments"\n\nClaude: Here are your recent PayStabl transactions:\n\nToday (Jan 15, 2024):\n- $2.50 \u2192 PDF Analysis API (10:30 AM)\n- $5.00 \u2192 Research Agent (11:15 AM) \n- $1.25 \u2192 Translation Service (2:20 PM)\nTotal: $8.75\n\nThis week: $45.30\nThis month: $156.80\n\nAll transactions are recorded on-chain for full transparency.\n'})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"mcp-server-not-starting",children:"MCP Server Not Starting"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check if PayStabl MCP server is installed\nnpm list -g @paystabl/mcp-server\n\n# Verify configuration\npaystabl-mcp-server --verify-config\n\n# Check logs\ntail -f ~/.claude/mcp-logs/paystabl.log\n"})}),"\n",(0,t.jsx)(n.h3,{id:"payment-failures",children:"Payment Failures"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Test PayStabl connection\npaystabl-mcp-server --test-connection\n\n# Verify agent wallet\npaystabl-mcp-server --check-balance\n\n# Validate API key\npaystabl-mcp-server --validate-key\n"})}),"\n",(0,t.jsx)(n.h3,{id:"claude-integration-issues",children:"Claude Integration Issues"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tools not appearing"}),": Restart Claude Desktop after config changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Permission denied"}),": Check MCP server permissions and API key"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network errors"}),": Verify internet connection and firewall settings"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"agent-wallet-management",children:"Agent Wallet Management"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Start with testnet for development"}),"\n",(0,t.jsx)(n.li,{children:"Set reasonable daily limits ($10-50)"}),"\n",(0,t.jsx)(n.li,{children:"Monitor spending regularly"}),"\n",(0,t.jsx)(n.li,{children:"Keep wallet funded but not over-funded"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"user-communication",children:"User Communication"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Always inform users about payments before processing"}),"\n",(0,t.jsx)(n.li,{children:"Show payment amounts and recipients clearly"}),"\n",(0,t.jsx)(n.li,{children:"Provide transaction receipts"}),"\n",(0,t.jsx)(n.li,{children:"Explain the value provided for each payment"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"error-recovery",children:"Error Recovery"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Gracefully handle payment failures"}),"\n",(0,t.jsx)(n.li,{children:"Suggest alternatives when payments fail"}),"\n",(0,t.jsx)(n.li,{children:"Provide clear next steps for resolution"}),"\n",(0,t.jsx)(n.li,{children:"Log errors for debugging"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/tools/pay_api_endpoint",children:"Tool Reference: pay_api_endpoint"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/tools/pay_agent",children:"Tool Reference: pay_agent"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/security",children:"Security Guide"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/quickstart",children:"Quickstart Guide"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/paystabl/mcp-server",children:"MCP Server GitHub"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://discord.gg/paystabl",children:"Discord Community"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"mailto:support@paystabl.com",children:"Email Support"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>l});var r=a(6540);const t={},i=r.createContext(t);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);