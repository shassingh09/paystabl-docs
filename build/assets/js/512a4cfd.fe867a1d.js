"use strict";(self.webpackChunkpaystabl_docs=self.webpackChunkpaystabl_docs||[]).push([[999],{3001:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"tools/pay_agent","title":"Pay Agent Utility","description":"A helper utility for implementing agent-to-agent payment operations using the AgentPay payment kernel.","source":"@site/docs/tools/pay_agent.mdx","sourceDirName":"tools","slug":"/tools/pay_agent","permalink":"/tools/pay_agent","draft":false,"unlisted":false,"editUrl":"https://github.com/paystabl/docs/tree/main/docs/tools/pay_agent.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Agent-to-Agent Payment Examples","permalink":"/examples/agent_to_agent"},"next":{"title":"\ud83d\udee0\ufe0f Tool: pay_api_endpoint","permalink":"/tools/pay_api_endpoint"}}');var i=t(4848),r=t(8453);const s={},o="Pay Agent Utility",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Agent Directory Integration",id:"agent-directory-integration",level:3},{value:"Payment Workflows",id:"payment-workflows",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"This utility simplifies the implementation of agent-to-agent payment systems while providing the flexibility to customize behavior for your specific use case.",id:"this-utility-simplifies-the-implementation-of-agent-to-agent-payment-systems-while-providing-the-flexibility-to-customize-behavior-for-your-specific-use-case",level:2},{value:"\ud83e\udd16 Use Case",id:"-use-case",level:2},{value:"\u2705 Input",id:"-input",level:2},{value:"\ud83d\udce4 Output",id:"-output",level:2},{value:"\ud83e\uddea Example Usage (JS)",id:"-example-usage-js",level:2},{value:"\ud83d\udee1\ufe0f Notes",id:"\ufe0f-notes",level:2},{value:"Detailed API Reference",id:"detailed-api-reference",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Response Fields",id:"response-fields",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Agent Service Marketplace",id:"agent-service-marketplace",level:3},{value:"Bulk Payments",id:"bulk-payments",level:3},{value:"Subscription-Style Payments",id:"subscription-style-payments",level:3},{value:"Error Handling",id:"error-handling-1",level:2},{value:"Common Error Scenarios",id:"common-error-scenarios",level:3},{value:"Payment Verification",id:"payment-verification",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"CrewAI Integration",id:"crewai-integration",level:3},{value:"LangGraph Workflow",id:"langgraph-workflow",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Agent Economics",id:"agent-economics",level:3},{value:"Reputation System",id:"reputation-system",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Payment Limits and Policies",id:"payment-limits-and-policies",level:3},{value:"Audit Trail",id:"audit-trail",level:3},{value:"Related Tools",id:"related-tools",level:2},{value:"Support",id:"support",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"pay-agent-utility",children:"Pay Agent Utility"})}),"\n",(0,i.jsx)(n.p,{children:"A helper utility for implementing agent-to-agent payment operations using the AgentPay payment kernel."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The Pay Agent utility provides a simplified interface for building agent-to-agent payment functionality into your applications. It wraps the AgentPay SDK with convenience methods specifically designed for inter-agent transactions."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @agentpay/pay-agent-utility\n"})}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const { PayAgentUtility } = require('@agentpay/pay-agent-utility');\n\nconst payAgent = new PayAgentUtility({\n  apiKey: process.env.AGENTPAY_API_KEY,\n  agentId: 'your-agent-identifier'\n});\n\n// Send payment to another agent\nconst result = await payAgent.sendToAgent({\n  recipientAgent: 'recipient-agent-id',\n  amount: 5.00,\n  currency: 'USD',\n  memo: 'Payment for data analysis',\n  metadata: {\n    service: 'data_analysis',\n    requestId: 'req_123'\n  }\n});\n\nconsole.log('Payment sent:', result);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsx)(n.h3,{id:"agent-directory-integration",children:"Agent Directory Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Register your agent in the directory\nawait payAgent.registerAgent({\n  name: 'Data Analysis Agent',\n  services: ['data_analysis', 'report_generation'],\n  rates: {\n    'data_analysis': { amount: 5.00, currency: 'USD' },\n    'report_generation': { amount: 10.00, currency: 'USD' }\n  }\n});\n\n// Find and pay other agents\nconst dataAgents = await payAgent.findAgents({\n  service: 'data_analysis',\n  maxRate: 10.00\n});\n\nfor (const agent of dataAgents) {\n  const quote = await payAgent.requestQuote({\n    agentId: agent.id,\n    service: 'data_analysis',\n    parameters: { dataset_size: 1000 }\n  });\n\n  if (quote.amount <= 5.00) {\n    await payAgent.sendToAgent({\n      recipientAgent: agent.id,\n      amount: quote.amount,\n      memo: `Payment for ${quote.service}`\n    });\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"payment-workflows",children:"Payment Workflows"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Create payment workflow for multi-step services\nconst workflow = await payAgent.createWorkflow({\n  steps: [\n    { agent: 'data-collector', service: 'collect', amount: 2.00 },\n    { agent: 'data-processor', service: 'process', amount: 3.00 },\n    { agent: 'report-generator', service: 'report', amount: 5.00 }\n  ]\n});\n\n// Execute workflow with automatic payments\nconst result = await payAgent.executeWorkflow(workflow.id, {\n  dataset: 'customer_data_2024'\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"try {\n  const result = await payAgent.sendToAgent({\n    recipientAgent: 'unknown-agent',\n    amount: 10.00\n  });\n} catch (error) {\n  switch (error.code) {\n    case 'AGENT_NOT_FOUND':\n      console.log('Recipient agent not registered');\n      break;\n    case 'INSUFFICIENT_FUNDS':\n      console.log('Not enough balance for payment');\n      break;\n    case 'PAYMENT_REJECTED':\n      console.log('Payment rejected by recipient');\n      break;\n    default:\n      console.log('Payment failed:', error.message);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"this-utility-simplifies-the-implementation-of-agent-to-agent-payment-systems-while-providing-the-flexibility-to-customize-behavior-for-your-specific-use-case",children:"This utility simplifies the implementation of agent-to-agent payment systems while providing the flexibility to customize behavior for your specific use case."}),"\n",(0,i.jsx)(n.h2,{id:"-use-case",children:"\ud83e\udd16 Use Case"}),"\n",(0,i.jsx)(n.p,{children:"Agent A wants to compensate Agent B for services like:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Text summarization"}),"\n",(0,i.jsx)(n.li,{children:"Tokenization"}),"\n",(0,i.jsx)(n.li,{children:"JSON conversion"}),"\n",(0,i.jsx)(n.li,{children:"Result lookup"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-input",children:"\u2705 Input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "fromAgentId": "agent_abc",\n  "toAgentId": "agent_xyz",\n  "amount": "0.25",\n  "purpose": "Used tokenizer agent for Claude"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-output",children:"\ud83d\udce4 Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "txHash": "0x...",\n  "xPayStablReceipt": "..."\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"-example-usage-js",children:"\ud83e\uddea Example Usage (JS)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'await pay_agent({\n  fromAgentId: "agent_abc",\n  toAgentId: "agent_xyz",\n  amount: "0.25",\n  purpose: "Claude used your parser tool"\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-notes",children:"\ud83d\udee1\ufe0f Notes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Both agents must be registered in PayStabl."}),"\n",(0,i.jsx)(n.li,{children:"Payment logs are stored onchain or optionally via PayStabl's backend."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"detailed-api-reference",children:"Detailed API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"fromAgentId"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"ID of the paying agent"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"toAgentId"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"ID of the receiving agent"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"amount"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:'Payment amount in USD (e.g., "0.25")'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"purpose"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"Description of the payment purpose"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"metadata"})}),(0,i.jsx)(n.td,{children:"object"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"Additional payment metadata"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"timeout"})}),(0,i.jsx)(n.td,{children:"number"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"Transaction timeout in seconds (default: 60)"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"response-fields",children:"Response Fields"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"status"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:'Payment status ("success", "pending", "failed")'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"txHash"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Blockchain transaction hash"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"xPayStablReceipt"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"PayStabl receipt identifier"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"timestamp"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"Transaction timestamp (ISO 8601)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"fees"})}),(0,i.jsx)(n.td,{children:"object"}),(0,i.jsx)(n.td,{children:"Transaction fee breakdown"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,i.jsx)(n.h3,{id:"agent-service-marketplace",children:"Agent Service Marketplace"}),"\n",(0,i.jsx)(n.p,{children:"Create a marketplace where agents can offer and pay for services:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Agent registry service\nclass AgentMarketplace {\n  constructor() {\n    this.services = new Map();\n    this.agents = new Map();\n  }\n\n  // Register an agent service\n  registerService(agentId, service) {\n    this.services.set(service.id, {\n      agentId,\n      name: service.name,\n      description: service.description,\n      price: service.price,\n      endpoint: service.endpoint\n    });\n  }\n\n  // Pay for and use a service\n  async useService(fromAgentId, serviceId, params) {\n    const service = this.services.get(serviceId);\n    if (!service) throw new Error("Service not found");\n\n    // Pay the service provider\n    const payment = await pay_agent({\n      fromAgentId,\n      toAgentId: service.agentId,\n      amount: service.price,\n      purpose: `Used service: ${service.name}`\n    });\n\n    // Call the service\n    const result = await fetch(service.endpoint, {\n      method: \'POST\',\n      headers: {\n        \'Content-Type\': \'application/json\',\n        \'X-PayStabl-Receipt\': payment.xPayStablReceipt\n      },\n      body: JSON.stringify(params)\n    });\n\n    return {\n      payment,\n      result: await result.json()\n    };\n  }\n}\n\n// Usage example\nconst marketplace = new AgentMarketplace();\n\n// Agent B registers a summarization service\nmarketplace.registerService("agent_b", {\n  id: "summarize",\n  name: "Text Summarization",\n  description: "Summarize long texts to key points",\n  price: "0.10",\n  endpoint: "https://agent-b.com/api/summarize"\n});\n\n// Agent A uses Agent B\'s service\nconst result = await marketplace.useService("agent_a", "summarize", {\n  text: "Long document content..."\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"bulk-payments",children:"Bulk Payments"}),"\n",(0,i.jsx)(n.p,{children:"For scenarios where an agent needs to pay multiple agents:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Pay multiple agents for a collaborative task\nasync function payCollaborators(projectId, collaborators) {\n  const payments = await Promise.all(\n    collaborators.map(({ agentId, amount, role }) =>\n      pay_agent({\n        fromAgentId: "project_coordinator",\n        toAgentId: agentId,\n        amount,\n        purpose: `Payment for ${role} on project ${projectId}`,\n        metadata: { projectId, role }\n      })\n    )\n  );\n\n  return {\n    projectId,\n    totalPaid: collaborators.reduce((sum, c) => sum + parseFloat(c.amount), 0),\n    payments\n  };\n}\n\n// Example usage\nawait payCollaborators("research_project_001", [\n  { agentId: "researcher_agent", amount: "5.00", role: "research" },\n  { agentId: "writer_agent", amount: "3.00", role: "writing" },\n  { agentId: "editor_agent", amount: "2.00", role: "editing" }\n]);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"subscription-style-payments",children:"Subscription-Style Payments"}),"\n",(0,i.jsx)(n.p,{children:"Set up recurring payments between agents:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'class AgentSubscription {\n  constructor(fromAgentId, toAgentId, amount, interval) {\n    this.fromAgentId = fromAgentId;\n    this.toAgentId = toAgentId;\n    this.amount = amount;\n    this.interval = interval; // in milliseconds\n    this.isActive = false;\n  }\n\n  start() {\n    this.isActive = true;\n    this.makePayment(); // Initial payment\n    this.scheduleNext();\n  }\n\n  stop() {\n    this.isActive = false;\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n  }\n\n  async makePayment() {\n    if (!this.isActive) return;\n\n    try {\n      const payment = await pay_agent({\n        fromAgentId: this.fromAgentId,\n        toAgentId: this.toAgentId,\n        amount: this.amount,\n        purpose: "Subscription payment"\n      });\n\n      console.log(`Subscription payment sent: ${payment.txHash}`);\n      this.scheduleNext();\n\n    } catch (error) {\n      console.error("Subscription payment failed:", error);\n      // Could implement retry logic or alerting here\n    }\n  }\n\n  scheduleNext() {\n    if (this.isActive) {\n      this.timeout = setTimeout(() => this.makePayment(), this.interval);\n    }\n  }\n}\n\n// Usage: Monthly subscription\nconst subscription = new AgentSubscription(\n  "subscriber_agent",\n  "service_provider_agent", \n  "10.00",\n  30 * 24 * 60 * 60 * 1000 // 30 days\n);\n\nsubscription.start();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling-1",children:"Error Handling"}),"\n",(0,i.jsx)(n.h3,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async function robustPayAgent(fromAgentId, toAgentId, amount, purpose) {\n  try {\n    const payment = await pay_agent({\n      fromAgentId,\n      toAgentId,\n      amount,\n      purpose\n    });\n\n    return payment;\n\n  } catch (error) {\n    switch (error.code) {\n      case 'INSUFFICIENT_FUNDS':\n        throw new Error(`Agent ${fromAgentId} has insufficient funds for payment of $${amount}`);\n\n      case 'AGENT_NOT_FOUND':\n        throw new Error(`Recipient agent ${toAgentId} not found in PayStabl network`);\n\n      case 'POLICY_VIOLATION':\n        throw new Error(`Payment blocked by agent policy: ${error.details}`);\n\n      case 'NETWORK_ERROR':\n        // Retry with exponential backoff\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        return robustPayAgent(fromAgentId, toAgentId, amount, purpose);\n\n      default:\n        throw new Error(`Payment failed: ${error.message}`);\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"payment-verification",children:"Payment Verification"}),"\n",(0,i.jsx)(n.p,{children:"Verify payments were received successfully:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async function verifyPayment(txHash, expectedAmount, expectedRecipient) {\n  const transaction = await getTransactionDetails(txHash);\n\n  if (!transaction) {\n    throw new Error(\"Transaction not found\");\n  }\n\n  if (transaction.status !== 'completed') {\n    throw new Error(`Transaction status: ${transaction.status}`);\n  }\n\n  if (transaction.amount !== expectedAmount) {\n    throw new Error(`Amount mismatch: expected ${expectedAmount}, got ${transaction.amount}`);\n  }\n\n  if (transaction.to !== expectedRecipient) {\n    throw new Error(`Recipient mismatch: expected ${expectedRecipient}, got ${transaction.to}`);\n  }\n\n  return true;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,i.jsx)(n.h3,{id:"crewai-integration",children:"CrewAI Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from crewai import Agent, Task, Crew\nfrom paystabl import PayStablAgent\n\nclass PaymentEnabledCrew:\n    def __init__(self, crew_id):\n        self.crew_id = crew_id\n        self.paystabl_agent = PayStablAgent(agent_id=crew_id)\n\n    def create_paid_task(self, description, agent_id, payment_amount):\n        def task_callback(task_output):\n            # Pay the agent for completing the task\n            self.paystabl_agent.pay_agent(\n                from_agent_id=self.crew_id,\n                to_agent_id=agent_id,\n                amount=payment_amount,\n                purpose=f"Task completion: {description[:50]}..."\n            )\n            return task_output\n\n        return Task(\n            description=description,\n            callback=task_callback\n        )\n\n# Usage\ncrew = PaymentEnabledCrew("research_crew")\n\nresearch_task = crew.create_paid_task(\n    "Research AI agent payment systems", \n    "research_agent_001",\n    "2.50"\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"langgraph-workflow",children:"LangGraph Workflow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from langgraph import StateGraph\nfrom paystabl import PayStablAgent\n\ndef create_payment_workflow():\n    paystabl = PayStablAgent(agent_id="workflow_coordinator")\n\n    def delegate_task(state):\n        # Delegate task to specialist agent\n        specialist_id = state["specialist_agent"]\n        task_description = state["task"]\n\n        # Pay the specialist\n        payment = paystabl.pay_agent(\n            from_agent_id="workflow_coordinator",\n            to_agent_id=specialist_id,\n            amount="1.00",\n            purpose=f"Task delegation: {task_description}"\n        )\n\n        # Add payment info to state\n        state["payment_receipt"] = payment["xPayStablReceipt"]\n        return state\n\n    workflow = StateGraph()\n    workflow.add_node("delegate", delegate_task)\n\n    return workflow\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"agent-economics",children:"Agent Economics"}),"\n",(0,i.jsx)(n.p,{children:"Design fair pricing models for agent services:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Dynamic pricing based on complexity\nfunction calculateServicePrice(task) {\n  const basePrice = 0.10;\n  const complexityMultiplier = {\n    'simple': 1.0,\n    'medium': 2.0,\n    'complex': 5.0\n  };\n\n  const urgencyMultiplier = task.urgent ? 1.5 : 1.0;\n\n  return (basePrice * complexityMultiplier[task.complexity] * urgencyMultiplier).toFixed(2);\n}\n\n// Quality-based payments\nasync function payBasedOnQuality(agentId, baseAmount, qualityScore) {\n  const qualityMultiplier = Math.max(0.5, Math.min(2.0, qualityScore));\n  const finalAmount = (parseFloat(baseAmount) * qualityMultiplier).toFixed(2);\n\n  return await pay_agent({\n    fromAgentId: \"quality_assessor\",\n    toAgentId: agentId,\n    amount: finalAmount,\n    purpose: `Quality-adjusted payment (score: ${qualityScore})`\n  });\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reputation-system",children:"Reputation System"}),"\n",(0,i.jsx)(n.p,{children:"Track agent performance for future payment decisions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"class AgentReputationSystem {\n  constructor() {\n    this.reputation = new Map();\n  }\n\n  recordTransaction(agentId, amount, quality, timeliness) {\n    if (!this.reputation.has(agentId)) {\n      this.reputation.set(agentId, {\n        totalEarned: 0,\n        totalTransactions: 0,\n        averageQuality: 0,\n        averageTimeliness: 0\n      });\n    }\n\n    const rep = this.reputation.get(agentId);\n    rep.totalEarned += parseFloat(amount);\n    rep.totalTransactions += 1;\n    rep.averageQuality = (rep.averageQuality * (rep.totalTransactions - 1) + quality) / rep.totalTransactions;\n    rep.averageTimeliness = (rep.averageTimeliness * (rep.totalTransactions - 1) + timeliness) / rep.totalTransactions;\n  }\n\n  getReputationScore(agentId) {\n    const rep = this.reputation.get(agentId);\n    if (!rep) return 0;\n\n    return (rep.averageQuality * 0.6 + rep.averageTimeliness * 0.4);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"payment-limits-and-policies",children:"Payment Limits and Policies"}),"\n",(0,i.jsx)(n.p,{children:"Set appropriate limits for agent-to-agent payments:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'await agent.configurePolicies({\n  agentPayments: {\n    dailyLimit: "100.00",\n    perTransactionLimit: "10.00",\n    trustedAgents: [\n      "verified_agent_001",\n      "certified_service_provider"\n    ],\n    requireApprovalAbove: "25.00"\n  }\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"audit-trail",children:"Audit Trail"}),"\n",(0,i.jsx)(n.p,{children:"Maintain comprehensive payment logs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async function auditAgentPayments(agentId, timeframe) {\n  const payments = await getAgentTransactions(agentId, timeframe);\n\n  const summary = {\n    totalSent: 0,\n    totalReceived: 0,\n    uniqueCounterparts: new Set(),\n    averageTransactionSize: 0,\n    paymentPurposes: {}\n  };\n\n  payments.forEach(payment => {\n    if (payment.fromAgentId === agentId) {\n      summary.totalSent += parseFloat(payment.amount);\n      summary.uniqueCounterparts.add(payment.toAgentId);\n    } else {\n      summary.totalReceived += parseFloat(payment.amount);\n      summary.uniqueCounterparts.add(payment.fromAgentId);\n    }\n\n    const purpose = payment.purpose || 'unspecified';\n    summary.paymentPurposes[purpose] = (summary.paymentPurposes[purpose] || 0) + 1;\n  });\n\n  summary.averageTransactionSize = (summary.totalSent + summary.totalReceived) / payments.length;\n  summary.uniqueCounterparts = summary.uniqueCounterparts.size;\n\n  return summary;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-tools",children:"Related Tools"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/tools/pay_api_endpoint",children:(0,i.jsx)(n.code,{children:"pay_api_endpoint"})})," - Pay external APIs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/security",children:"Security Guide"})," - Agent wallet security"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/examples/agent_to_agent",children:"Examples"})," - Real-world implementations"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,i.jsx)(n.p,{children:"Need help with agent-to-agent payments?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://discord.gg/paystabl",children:"Discord Community"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/paystabl/sdk/issues",children:"GitHub Issues"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"mailto:support@paystabl.com",children:"Email Support"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);