"use strict";(self.webpackChunkpaystabl_docs=self.webpackChunkpaystabl_docs||[]).push([[553],{8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var a=t(6540);const s={},r=a.createContext(s);function i(n){const e=a.useContext(r);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),a.createElement(r.Provider,{value:e},n.children)}},8905:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"integrations/custom_frameworks","title":"Custom Framework Integration","description":"Build PayStabl integration for any AI framework or custom agent system using our SDKs and APIs. This guide covers implementation patterns, best practices, and examples for various agent architectures.","source":"@site/docs/integrations/custom_frameworks.mdx","sourceDirName":"integrations","slug":"/integrations/custom_frameworks","permalink":"/integrations/custom_frameworks","draft":false,"unlisted":false,"editUrl":"https://github.com/paystabl/docs/tree/main/docs/integrations/custom_frameworks.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"n8n Integration","permalink":"/integrations/n8n"},"next":{"title":"Claude MCP Demo","permalink":"/examples/claude_demo"}}');var s=t(4848),r=t(8453);const i={},o="Custom Framework Integration",l={},p=[{value:"SDK Options",id:"sdk-options",level:2},{value:"JavaScript/TypeScript SDK",id:"javascripttypescript-sdk",level:3},{value:"Python SDK",id:"python-sdk",level:3},{value:"Go SDK",id:"go-sdk",level:3},{value:"Integration Patterns",id:"integration-patterns",level:2},{value:"Event-Driven Architecture",id:"event-driven-architecture",level:3},{value:"Plugin Architecture",id:"plugin-architecture",level:3},{value:"Microservices Architecture",id:"microservices-architecture",level:3},{value:"Framework-Specific Examples",id:"framework-specific-examples",level:2},{value:"Custom React Agent UI",id:"custom-react-agent-ui",level:3},{value:"Custom Django Agent Backend",id:"custom-django-agent-backend",level:3},{value:"FastAPI Integration",id:"fastapi-integration",level:3},{value:"Testing Your Integration",id:"testing-your-integration",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Error Handling",id:"error-handling",level:3},{value:"Configuration Management",id:"configuration-management",level:3},{value:"Deployment Considerations",id:"deployment-considerations",level:2},{value:"Docker Integration",id:"docker-integration",level:3},{value:"Kubernetes Deployment",id:"kubernetes-deployment",level:3},{value:"Related Documentation",id:"related-documentation",level:2},{value:"Support",id:"support",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"custom-framework-integration",children:"Custom Framework Integration"})}),"\n",(0,s.jsx)(e.p,{children:"Build PayStabl integration for any AI framework or custom agent system using our SDKs and APIs. This guide covers implementation patterns, best practices, and examples for various agent architectures."}),"\n",(0,s.jsx)(e.h2,{id:"sdk-options",children:"SDK Options"}),"\n",(0,s.jsx)(e.h3,{id:"javascripttypescript-sdk",children:"JavaScript/TypeScript SDK"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install @paystabl/sdk\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Basic Integration:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { PayStablAgent } from '@paystabl/sdk';\n\nclass MyCustomAgent {\n  private paystabl: PayStablAgent;\n  \n  constructor(agentId: string, config: AgentConfig) {\n    this.paystabl = new PayStablAgent({\n      agentId,\n      apiKey: config.payStablApiKey,\n      network: config.network || 'base-sepolia'\n    });\n  }\n\n  async callPaidAPI(url: string, options: RequestOptions = {}) {\n    try {\n      // Attempt payment and get headers\n      const payment = await this.paystabl.pay_api_endpoint({\n        url,\n        method: options.method || 'GET',\n        data: options.body,\n        headers: options.headers\n      });\n\n      // Make actual API call with payment header\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          ...options.headers,\n          'X-Payment': payment.xPaymentHeader\n        }\n      });\n\n      return {\n        data: await response.json(),\n        payment: payment.receipt\n      };\n\n    } catch (error) {\n      throw new PaymentError(error.message, error.code);\n    }\n  }\n\n  async payOtherAgent(toAgentId: string, amount: string, purpose: string) {\n    return await this.paystabl.pay_agent({\n      fromAgentId: this.agentId,\n      toAgentId,\n      amount,\n      purpose\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"python-sdk",children:"Python SDK"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"pip install paystabl-python\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Basic Integration:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from paystabl import PayStablAgent\nimport requests\n\nclass CustomPythonAgent:\n    def __init__(self, agent_id: str, api_key: str):\n        self.agent_id = agent_id\n        self.paystabl = PayStablAgent(\n            agent_id=agent_id,\n            api_key=api_key,\n            network="base-sepolia"\n        )\n    \n    def call_paid_api(self, url: str, method="GET", data=None, headers=None):\n        try:\n            # Get payment authorization\n            payment = self.paystabl.pay_api_endpoint(\n                url=url,\n                method=method,\n                data=data,\n                headers=headers\n            )\n            \n            # Make request with payment header\n            response = requests.request(\n                method=method,\n                url=url,\n                headers={\n                    **(headers or {}),\n                    "X-Payment": payment["xPaymentHeader"]\n                },\n                json=data\n            )\n            \n            return {\n                "data": response.json(),\n                "payment": payment["receipt"]\n            }\n            \n        except Exception as e:\n            raise PaymentException(f"Payment failed: {str(e)}")\n    \n    def pay_agent(self, to_agent_id: str, amount: str, purpose: str):\n        return self.paystabl.pay_agent(\n            from_agent_id=self.agent_id,\n            to_agent_id=to_agent_id,\n            amount=amount,\n            purpose=purpose\n        )\n'})}),"\n",(0,s.jsx)(e.h3,{id:"go-sdk",children:"Go SDK"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"go get github.com/paystabl/paystabl-go\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Basic Integration:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/paystabl/paystabl-go"\n    "net/http"\n    "bytes"\n    "encoding/json"\n)\n\ntype CustomGoAgent struct {\n    AgentID   string\n    PayStabl  *paystabl.Client\n}\n\nfunc NewCustomGoAgent(agentID, apiKey string) *CustomGoAgent {\n    client := paystabl.NewClient(apiKey, paystabl.Config{\n        Network: "base-sepolia",\n    })\n    \n    return &CustomGoAgent{\n        AgentID:  agentID,\n        PayStabl: client,\n    }\n}\n\nfunc (a *CustomGoAgent) CallPaidAPI(url, method string, body interface{}) (*APIResponse, error) {\n    // Get payment authorization\n    payment, err := a.PayStabl.PayAPIEndpoint(paystabl.APIPaymentRequest{\n        AgentID: a.AgentID,\n        URL:     url,\n        Method:  method,\n        Data:    body,\n    })\n    if err != nil {\n        return nil, err\n    }\n    \n    // Prepare request\n    var reqBody bytes.Buffer\n    if body != nil {\n        json.NewEncoder(&reqBody).Encode(body)\n    }\n    \n    req, err := http.NewRequest(method, url, &reqBody)\n    if err != nil {\n        return nil, err\n    }\n    \n    // Add payment header\n    req.Header.Set("X-Payment", payment.XPaymentHeader)\n    req.Header.Set("Content-Type", "application/json")\n    \n    // Execute request\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n    \n    var result APIResponse\n    json.NewDecoder(resp.Body).Decode(&result)\n    \n    return &result, nil\n}\n\nfunc (a *CustomGoAgent) PayAgent(toAgentID, amount, purpose string) (*paystabl.PaymentReceipt, error) {\n    return a.PayStabl.PayAgent(paystabl.AgentPaymentRequest{\n        FromAgentID: a.AgentID,\n        ToAgentID:   toAgentID,\n        Amount:      amount,\n        Purpose:     purpose,\n    })\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"integration-patterns",children:"Integration Patterns"}),"\n",(0,s.jsx)(e.h3,{id:"event-driven-architecture",children:"Event-Driven Architecture"}),"\n",(0,s.jsx)(e.p,{children:"Integrate PayStabl with event-driven agent systems:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import { EventEmitter } from 'events';\n\nclass EventDrivenAgent extends EventEmitter {\n  constructor(agentId: string) {\n    super();\n    this.paystabl = new PayStablAgent({ agentId });\n    this.setupPaymentHandlers();\n  }\n\n  setupPaymentHandlers() {\n    // Handle payment requests\n    this.on('api_payment_needed', async (event) => {\n      try {\n        const payment = await this.paystabl.pay_api_endpoint(event.payload);\n        this.emit('payment_completed', { \n          originalEvent: event, \n          payment \n        });\n      } catch (error) {\n        this.emit('payment_failed', { \n          originalEvent: event, \n          error \n        });\n      }\n    });\n\n    // Handle agent-to-agent payments\n    this.on('agent_payment_needed', async (event) => {\n      try {\n        const payment = await this.paystabl.pay_agent(event.payload);\n        this.emit('agent_payment_completed', { \n          originalEvent: event, \n          payment \n        });\n      } catch (error) {\n        this.emit('agent_payment_failed', { \n          originalEvent: event, \n          error \n        });\n      }\n    });\n  }\n\n  async processTask(task) {\n    // Emit payment event when needed\n    if (task.requiresPaidAPI) {\n      this.emit('api_payment_needed', {\n        id: task.id,\n        payload: {\n          url: task.apiUrl,\n          method: 'POST',\n          data: task.parameters\n        }\n      });\n    }\n  }\n}\n\n// Usage\nconst agent = new EventDrivenAgent('event_agent_001');\n\nagent.on('payment_completed', (event) => {\n  console.log('Payment successful, continuing with task...');\n  // Continue processing with payment header\n});\n\nagent.on('payment_failed', (event) => {\n  console.log('Payment failed, trying alternative...');\n  // Handle failure gracefully\n});\n"})}),"\n",(0,s.jsx)(e.h3,{id:"plugin-architecture",children:"Plugin Architecture"}),"\n",(0,s.jsx)(e.p,{children:"Create a PayStabl plugin for existing agent frameworks:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"interface AgentPlugin {\n  name: string;\n  version: string;\n  initialize(agent: any): void;\n  destroy(): void;\n}\n\nclass PayStablPlugin implements AgentPlugin {\n  name = 'paystabl';\n  version = '1.0.0';\n  \n  private paystabl: PayStablAgent;\n  private agent: any;\n\n  initialize(agent: any) {\n    this.agent = agent;\n    this.paystabl = new PayStablAgent({\n      agentId: agent.id,\n      apiKey: agent.config.payStablApiKey\n    });\n\n    // Add payment methods to agent\n    agent.payForAPI = this.payForAPI.bind(this);\n    agent.payAgent = this.payAgent.bind(this);\n    agent.checkBalance = this.checkBalance.bind(this);\n\n    // Hook into agent's request pipeline\n    if (agent.addRequestMiddleware) {\n      agent.addRequestMiddleware(this.paymentMiddleware.bind(this));\n    }\n  }\n\n  async paymentMiddleware(request: any, next: Function) {\n    // Automatically handle 402 responses\n    const response = await next(request);\n    \n    if (response.status === 402) {\n      console.log('402 Payment Required detected, processing payment...');\n      \n      const payment = await this.paystabl.pay_api_endpoint({\n        url: request.url,\n        method: request.method,\n        data: request.body,\n        headers: request.headers\n      });\n\n      // Retry request with payment header\n      request.headers['X-Payment'] = payment.xPaymentHeader;\n      return await next(request);\n    }\n\n    return response;\n  }\n\n  async payForAPI(url: string, options = {}) {\n    return await this.paystabl.pay_api_endpoint({\n      url,\n      ...options\n    });\n  }\n\n  async payAgent(toAgentId: string, amount: string, purpose: string) {\n    return await this.paystabl.pay_agent({\n      fromAgentId: this.agent.id,\n      toAgentId,\n      amount,\n      purpose\n    });\n  }\n\n  async checkBalance() {\n    return await this.paystabl.getBalance();\n  }\n\n  destroy() {\n    // Cleanup resources\n    this.paystabl = null;\n    this.agent = null;\n  }\n}\n\n// Register plugin with your framework\nAgentFramework.registerPlugin(new PayStablPlugin());\n"})}),"\n",(0,s.jsx)(e.h3,{id:"microservices-architecture",children:"Microservices Architecture"}),"\n",(0,s.jsx)(e.p,{children:"Integrate PayStabl in a microservices environment:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// Payment Service\nclass PaymentMicroservice {\n  private paystabl: PayStablAgent;\n\n  constructor() {\n    this.paystabl = new PayStablAgent({\n      agentId: 'payment_service',\n      apiKey: process.env.PAYSTABL_API_KEY\n    });\n  }\n\n  async handleAPIPayment(req: PaymentRequest): Promise<PaymentResponse> {\n    try {\n      const payment = await this.paystabl.pay_api_endpoint({\n        url: req.url,\n        method: req.method,\n        data: req.data,\n        headers: req.headers\n      });\n\n      return {\n        success: true,\n        xPaymentHeader: payment.xPaymentHeader,\n        receipt: payment.receipt\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        code: error.code\n      };\n    }\n  }\n\n  async handleAgentPayment(req: AgentPaymentRequest): Promise<PaymentResponse> {\n    try {\n      const payment = await this.paystabl.pay_agent({\n        fromAgentId: req.fromAgentId,\n        toAgentId: req.toAgentId,\n        amount: req.amount,\n        purpose: req.purpose\n      });\n\n      return {\n        success: true,\n        txHash: payment.txHash,\n        receipt: payment.xPayStablReceipt\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        code: error.code\n      };\n    }\n  }\n}\n\n// Agent Service (uses Payment Service)\nclass AgentMicroservice {\n  private paymentService: PaymentServiceClient;\n\n  constructor() {\n    this.paymentService = new PaymentServiceClient('http://payment-service:3000');\n  }\n\n  async processTask(task: Task) {\n    if (task.requiresPayment) {\n      // Call payment microservice\n      const paymentResult = await this.paymentService.requestAPIPayment({\n        url: task.apiUrl,\n        method: 'POST',\n        data: task.parameters\n      });\n\n      if (paymentResult.success) {\n        // Use payment header for API call\n        const response = await fetch(task.apiUrl, {\n          method: 'POST',\n          headers: {\n            'X-Payment': paymentResult.xPaymentHeader,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(task.parameters)\n        });\n\n        return await response.json();\n      } else {\n        throw new Error(`Payment failed: ${paymentResult.error}`);\n      }\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"framework-specific-examples",children:"Framework-Specific Examples"}),"\n",(0,s.jsx)(e.h3,{id:"custom-react-agent-ui",children:"Custom React Agent UI"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"import React, { useState, useEffect } from 'react';\nimport { PayStablAgent } from '@paystabl/sdk';\n\ninterface AgentUIProps {\n  agentId: string;\n  apiKey: string;\n}\n\nexport const AgentPaymentUI: React.FC<AgentUIProps> = ({ agentId, apiKey }) => {\n  const [paystabl, setPaystabl] = useState<PayStablAgent | null>(null);\n  const [balance, setBalance] = useState<string>('0');\n  const [transactions, setTransactions] = useState<any[]>([]);\n\n  useEffect(() => {\n    const agent = new PayStablAgent({ agentId, apiKey });\n    setPaystabl(agent);\n\n    // Load initial data\n    agent.getBalance().then(setBalance);\n    agent.getTransactions().then(setTransactions);\n  }, [agentId, apiKey]);\n\n  const handleAPIPayment = async (url: string) => {\n    if (!paystabl) return;\n\n    try {\n      const payment = await paystabl.pay_api_endpoint({ url });\n      \n      // Update UI with payment result\n      setTransactions(prev => [...prev, payment.receipt]);\n      \n      // Make actual API call\n      const response = await fetch(url, {\n        headers: { 'X-Payment': payment.xPaymentHeader }\n      });\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Payment failed:', error);\n    }\n  };\n\n  return (\n    <div className=\"agent-payment-ui\">\n      <div className=\"balance\">\n        Balance: ${balance}\n      </div>\n      \n      <div className=\"transactions\">\n        <h3>Recent Transactions</h3>\n        {transactions.map(tx => (\n          <div key={tx.txHash} className=\"transaction\">\n            {tx.amount} - {tx.purpose}\n          </div>\n        ))}\n      </div>\n      \n      <button onClick={() => handleAPIPayment('https://api.example.com/data')}>\n        Pay for Premium Data\n      </button>\n    </div>\n  );\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"custom-django-agent-backend",children:"Custom Django Agent Backend"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"# models.py\nfrom django.db import models\nfrom paystabl import PayStablAgent\n\nclass Agent(models.Model):\n    agent_id = models.CharField(max_length=100, unique=True)\n    name = models.CharField(max_length=200)\n    api_key = models.CharField(max_length=500)\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    def get_paystabl_client(self):\n        return PayStablAgent(\n            agent_id=self.agent_id,\n            api_key=self.api_key\n        )\n\nclass PaymentLog(models.Model):\n    agent = models.ForeignKey(Agent, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    purpose = models.CharField(max_length=500)\n    tx_hash = models.CharField(max_length=200)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n# views.py\nfrom django.http import JsonResponse\nfrom django.views import View\nfrom .models import Agent, PaymentLog\n\nclass PaymentView(View):\n    def post(self, request, agent_id):\n        try:\n            agent = Agent.objects.get(agent_id=agent_id)\n            paystabl = agent.get_paystabl_client()\n            \n            data = json.loads(request.body)\n            \n            if data['type'] == 'api_payment':\n                result = paystabl.pay_api_endpoint(\n                    url=data['url'],\n                    method=data.get('method', 'GET'),\n                    data=data.get('payload')\n                )\n                \n                # Log the payment\n                PaymentLog.objects.create(\n                    agent=agent,\n                    amount=result['receipt']['amount'],\n                    purpose=f\"API payment to {data['url']}\",\n                    tx_hash=result['receipt']['txHash']\n                )\n                \n                return JsonResponse({\n                    'success': True,\n                    'payment_header': result['xPaymentHeader'],\n                    'receipt': result['receipt']\n                })\n            \n            elif data['type'] == 'agent_payment':\n                result = paystabl.pay_agent(\n                    from_agent_id=agent_id,\n                    to_agent_id=data['to_agent_id'],\n                    amount=data['amount'],\n                    purpose=data['purpose']\n                )\n                \n                # Log the payment\n                PaymentLog.objects.create(\n                    agent=agent,\n                    amount=data['amount'],\n                    purpose=data['purpose'],\n                    tx_hash=result['txHash']\n                )\n                \n                return JsonResponse({\n                    'success': True,\n                    'tx_hash': result['txHash'],\n                    'receipt': result['xPayStablReceipt']\n                })\n                \n        except Exception as e:\n            return JsonResponse({\n                'success': False,\n                'error': str(e)\n            }, status=400)\n"})}),"\n",(0,s.jsx)(e.h3,{id:"fastapi-integration",children:"FastAPI Integration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from fastapi import FastAPI, HTTPException, BackgroundTasks\nfrom pydantic import BaseModel\nfrom paystabl import PayStablAgent\nimport asyncio\n\napp = FastAPI(title="Agent Payment API")\n\nclass APIPaymentRequest(BaseModel):\n    agent_id: str\n    url: str\n    method: str = "GET"\n    data: dict = None\n    headers: dict = None\n\nclass AgentPaymentRequest(BaseModel):\n    from_agent_id: str\n    to_agent_id: str\n    amount: str\n    purpose: str\n\nclass PaymentService:\n    def __init__(self):\n        self.agents = {}\n    \n    def get_agent(self, agent_id: str) -> PayStablAgent:\n        if agent_id not in self.agents:\n            self.agents[agent_id] = PayStablAgent(\n                agent_id=agent_id,\n                api_key=os.getenv(\'PAYSTABL_API_KEY\')\n            )\n        return self.agents[agent_id]\n\npayment_service = PaymentService()\n\n@app.post("/api/pay/endpoint")\nasync def pay_api_endpoint(request: APIPaymentRequest):\n    try:\n        agent = payment_service.get_agent(request.agent_id)\n        \n        result = await agent.pay_api_endpoint(\n            url=request.url,\n            method=request.method,\n            data=request.data,\n            headers=request.headers\n        )\n        \n        return {\n            "success": True,\n            "payment_header": result["xPaymentHeader"],\n            "receipt": result["receipt"]\n        }\n        \n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@app.post("/api/pay/agent")\nasync def pay_agent(request: AgentPaymentRequest):\n    try:\n        agent = payment_service.get_agent(request.from_agent_id)\n        \n        result = await agent.pay_agent(\n            from_agent_id=request.from_agent_id,\n            to_agent_id=request.to_agent_id,\n            amount=request.amount,\n            purpose=request.purpose\n        )\n        \n        return {\n            "success": True,\n            "tx_hash": result["txHash"],\n            "receipt": result["xPayStablReceipt"]\n        }\n        \n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@app.get("/api/agent/{agent_id}/balance")\nasync def get_balance(agent_id: str):\n    try:\n        agent = payment_service.get_agent(agent_id)\n        balance = await agent.get_balance()\n        \n        return {\n            "agent_id": agent_id,\n            "balance": balance\n        }\n        \n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n'})}),"\n",(0,s.jsx)(e.h2,{id:"testing-your-integration",children:"Testing Your Integration"}),"\n",(0,s.jsx)(e.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"// payment.test.ts\nimport { PayStablAgent } from '@paystabl/sdk';\nimport { jest } from '@jest/globals';\n\ndescribe('PayStabl Integration', () => {\n  let agent: PayStablAgent;\n\n  beforeEach(() => {\n    agent = new PayStablAgent({\n      agentId: 'test_agent',\n      apiKey: 'test_key',\n      network: 'base-sepolia'\n    });\n  });\n\n  test('should handle API payment successfully', async () => {\n    const mockPayment = {\n      xPaymentHeader: 'mock_header',\n      receipt: {\n        txHash: 'mock_tx',\n        amount: '1.00'\n      }\n    };\n\n    jest.spyOn(agent, 'pay_api_endpoint').mockResolvedValue(mockPayment);\n\n    const result = await agent.pay_api_endpoint({\n      url: 'https://test-api.com',\n      method: 'GET'\n    });\n\n    expect(result.xPaymentHeader).toBe('mock_header');\n    expect(result.receipt.amount).toBe('1.00');\n  });\n\n  test('should handle payment failures gracefully', async () => {\n    jest.spyOn(agent, 'pay_api_endpoint').mockRejectedValue(\n      new Error('Insufficient funds')\n    );\n\n    await expect(agent.pay_api_endpoint({\n      url: 'https://test-api.com'\n    })).rejects.toThrow('Insufficient funds');\n  });\n});\n"})}),"\n",(0,s.jsx)(e.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'# test_integration.py\nimport pytest\nfrom paystabl import PayStablAgent\nimport asyncio\n\n@pytest.fixture\ndef test_agent():\n    return PayStablAgent(\n        agent_id="test_agent_integration",\n        api_key=os.getenv(\'PAYSTABL_TEST_API_KEY\'),\n        network="base-sepolia"\n    )\n\n@pytest.mark.asyncio\nasync def test_end_to_end_api_payment(test_agent):\n    # Test with a real test API that supports x402\n    result = await test_agent.pay_api_endpoint(\n        url="https://test-402-api.paystabl.com/premium-data",\n        method="GET"\n    )\n    \n    assert result["xPaymentHeader"] is not None\n    assert result["receipt"]["txHash"] is not None\n    assert float(result["receipt"]["amount"]) > 0\n\n@pytest.mark.asyncio \nasync def test_agent_to_agent_payment(test_agent):\n    # Test payment between test agents\n    result = await test_agent.pay_agent(\n        from_agent_id="test_agent_integration",\n        to_agent_id="test_recipient_agent",\n        amount="0.10",\n        purpose="Integration test payment"\n    )\n    \n    assert result["status"] == "success"\n    assert result["txHash"] is not None\n'})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(e.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"class RobustPaymentHandler {\n  private paystabl: PayStablAgent;\n  private retryPolicy: RetryPolicy;\n\n  constructor(agentId: string, config: PaymentConfig) {\n    this.paystabl = new PayStablAgent({ agentId, ...config });\n    this.retryPolicy = config.retryPolicy || this.defaultRetryPolicy;\n  }\n\n  async handlePaymentWithRetry(paymentFn: () => Promise<any>): Promise<any> {\n    let lastError: Error;\n    \n    for (let attempt = 1; attempt <= this.retryPolicy.maxAttempts; attempt++) {\n      try {\n        return await paymentFn();\n      } catch (error) {\n        lastError = error;\n        \n        if (this.isRetryableError(error) && attempt < this.retryPolicy.maxAttempts) {\n          const delay = this.calculateDelay(attempt);\n          await this.sleep(delay);\n          continue;\n        }\n        \n        throw error;\n      }\n    }\n    \n    throw lastError;\n  }\n\n  private isRetryableError(error: any): boolean {\n    const retryableCodes = ['NETWORK_ERROR', 'TIMEOUT', 'RATE_LIMITED'];\n    return retryableCodes.includes(error.code);\n  }\n\n  private calculateDelay(attempt: number): number {\n    return Math.min(1000 * Math.pow(2, attempt - 1), 30000); // Exponential backoff\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:"interface PaymentConfig {\n  agentId: string;\n  apiKey: string;\n  network: 'mainnet' | 'base-sepolia';\n  policies: {\n    dailyLimit: string;\n    perCallLimit: string;\n    allowedDomains: string[];\n  };\n  retryPolicy: {\n    maxAttempts: number;\n    backoffFactor: number;\n  };\n  monitoring: {\n    enableLogging: boolean;\n    alertThresholds: {\n      dailySpend: string;\n      failureRate: number;\n    };\n  };\n}\n\nclass ConfigurablePaymentAgent {\n  private config: PaymentConfig;\n  private paystabl: PayStablAgent;\n\n  constructor(config: PaymentConfig) {\n    this.config = this.validateConfig(config);\n    this.paystabl = new PayStablAgent({\n      agentId: config.agentId,\n      apiKey: config.apiKey,\n      network: config.network\n    });\n    \n    this.setupPolicies();\n    this.setupMonitoring();\n  }\n\n  private validateConfig(config: PaymentConfig): PaymentConfig {\n    if (!config.agentId || !config.apiKey) {\n      throw new Error('Agent ID and API key are required');\n    }\n    \n    if (parseFloat(config.policies.dailyLimit) <= 0) {\n      throw new Error('Daily limit must be positive');\n    }\n    \n    return config;\n  }\n\n  private async setupPolicies() {\n    await this.paystabl.configurePolicies({\n      dailyLimit: this.config.policies.dailyLimit,\n      perCallLimit: this.config.policies.perCallLimit,\n      allowedDomains: this.config.policies.allowedDomains\n    });\n  }\n\n  private setupMonitoring() {\n    if (this.config.monitoring.enableLogging) {\n      // Setup logging and monitoring\n      this.paystabl.on('payment_completed', (event) => {\n        console.log(`Payment completed: ${event.amount} to ${event.recipient}`);\n      });\n      \n      this.paystabl.on('payment_failed', (event) => {\n        console.error(`Payment failed: ${event.error}`);\n      });\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"deployment-considerations",children:"Deployment Considerations"}),"\n",(0,s.jsx)(e.h3,{id:"docker-integration",children:"Docker Integration"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dockerfile",children:'# Dockerfile for custom agent with PayStabl\nFROM node:18-alpine\n\nWORKDIR /app\n\n# Install dependencies\nCOPY package*.json ./\nRUN npm ci --only=production\n\n# Copy application code\nCOPY . .\n\n# Environment variables\nENV NODE_ENV=production\nENV PAYSTABL_API_KEY=""\nENV AGENT_ID=""\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node healthcheck.js\n\nEXPOSE 3000\n\nCMD ["npm", "start"]\n'})}),"\n",(0,s.jsx)(e.h3,{id:"kubernetes-deployment",children:"Kubernetes Deployment"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# k8s-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: custom-payment-agent\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: custom-payment-agent\n  template:\n    metadata:\n      labels:\n        app: custom-payment-agent\n    spec:\n      containers:\n      - name: agent\n        image: your-registry/custom-payment-agent:latest\n        ports:\n        - containerPort: 3000\n        env:\n        - name: PAYSTABL_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: paystabl-secrets\n              key: api-key\n        - name: AGENT_ID\n          value: "k8s-payment-agent"\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "100m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: paystabl-secrets\ntype: Opaque\ndata:\n  api-key: <base64-encoded-api-key>\n'})}),"\n",(0,s.jsx)(e.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/docs/tools/pay_api_endpoint",children:"Core Payment Tools"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/docs/security",children:"Security Best Practices"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/docs/reference/x402_headers",children:"API Reference"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/docs/examples",children:"Example Implementations"})}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"support",children:"Support"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://docs.paystabl.com/sdk",children:"SDK Documentation"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/paystabl",children:"GitHub Repositories"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://discord.gg/paystabl",children:"Discord Community"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"mailto:support@paystabl.com",children:"Email Support"})}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}}}]);