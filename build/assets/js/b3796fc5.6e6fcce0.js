"use strict";(self.webpackChunkpaystabl_docs=self.webpackChunkpaystabl_docs||[]).push([[962],{6943:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"testnets","title":"Testnet Development","description":"Develop and test your PayStabl agent integrations on testnets before deploying to production. This guide covers testnet setup, faucets, debugging tools, and best practices for agent development.","source":"@site/docs/testnets.mdx","sourceDirName":".","slug":"/testnets","permalink":"/testnets","draft":false,"unlisted":false,"editUrl":"https://github.com/paystabl/docs/tree/main/docs/testnets.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Security Guide","permalink":"/security"}}');var a=t(4848),r=t(8453);const o={},i="Testnet Development",c={},l=[{value:"Supported Testnets",id:"supported-testnets",level:2},{value:"Base Sepolia (Primary)",id:"base-sepolia-primary",level:3},{value:"Ethereum Sepolia (Secondary)",id:"ethereum-sepolia-secondary",level:3},{value:"Getting Testnet Funds",id:"getting-testnet-funds",level:2},{value:"Base Sepolia Faucet",id:"base-sepolia-faucet",level:3},{value:"Automated Faucet Integration",id:"automated-faucet-integration",level:3},{value:"Development Environment Setup",id:"development-environment-setup",level:2},{value:"Environment Configuration",id:"environment-configuration",level:3},{value:"Development Scripts",id:"development-scripts",level:3},{value:"Testing Scenarios",id:"testing-scenarios",level:2},{value:"API Payment Testing",id:"api-payment-testing",level:3},{value:"Agent-to-Agent Testing",id:"agent-to-agent-testing",level:3},{value:"Debugging and Monitoring",id:"debugging-and-monitoring",level:2},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Transaction Monitoring",id:"transaction-monitoring",level:3},{value:"Error Tracking",id:"error-tracking",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Development Workflow",id:"development-workflow",level:3},{value:"Resource Management",id:"resource-management",level:3},{value:"Performance Testing",id:"performance-testing",level:3},{value:"Transition to Production",id:"transition-to-production",level:2},{value:"Pre-production Checklist",id:"pre-production-checklist",level:3},{value:"Configuration Changes",id:"configuration-changes",level:3},{value:"Related Documentation",id:"related-documentation",level:2},{value:"Support",id:"support",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"testnet-development",children:"Testnet Development"})}),"\n",(0,a.jsx)(e.p,{children:"Develop and test your PayStabl agent integrations on testnets before deploying to production. This guide covers testnet setup, faucets, debugging tools, and best practices for agent development."}),"\n",(0,a.jsx)(e.h2,{id:"supported-testnets",children:"Supported Testnets"}),"\n",(0,a.jsx)(e.h3,{id:"base-sepolia-primary",children:"Base Sepolia (Primary)"}),"\n",(0,a.jsx)(e.p,{children:"PayStabl's primary testnet environment runs on Base Sepolia:"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Network Details:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Name"}),": Base Sepolia"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Chain ID"}),": 84532"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"RPC URL"}),": ",(0,a.jsx)(e.code,{children:"https://sepolia.base.org"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Explorer"}),": ",(0,a.jsx)(e.a,{href:"https://sepolia.basescan.org",children:"https://sepolia.basescan.org"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Currency"}),": ETH (Testnet)"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Quick Setup:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'import { PayStablAgent } from \'@paystabl/sdk\';\n\nconst agent = new PayStablAgent({\n  agentId: "test_agent_001",\n  apiKey: process.env.PAYSTABL_API_KEY,\n  network: "base-sepolia"  // Use testnet\n});\n'})}),"\n",(0,a.jsx)(e.h3,{id:"ethereum-sepolia-secondary",children:"Ethereum Sepolia (Secondary)"}),"\n",(0,a.jsx)(e.p,{children:"For broader Ethereum ecosystem testing:"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Network Details:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Name"}),": Ethereum Sepolia"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Chain ID"}),": 11155111"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"RPC URL"}),": ",(0,a.jsx)(e.code,{children:"https://sepolia.infura.io/v3/YOUR-API-KEY"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Explorer"}),": ",(0,a.jsx)(e.a,{href:"https://sepolia.etherscan.io",children:"https://sepolia.etherscan.io"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Currency"}),": ETH (Testnet)"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"getting-testnet-funds",children:"Getting Testnet Funds"}),"\n",(0,a.jsx)(e.h3,{id:"base-sepolia-faucet",children:"Base Sepolia Faucet"}),"\n",(0,a.jsx)(e.p,{children:"Multiple options for getting Base Sepolia ETH:"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Option 1: Coinbase Faucet"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:'curl -X POST https://faucet.quicknode.com/base/sepolia \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "address": "YOUR_WALLET_ADDRESS",\n    "amount": "0.5"\n  }\'\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Option 2: Web Interface"})}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["Visit ",(0,a.jsx)(e.a,{href:"https://faucet.quicknode.com/base/sepolia",children:"Coinbase Base Faucet"})]}),"\n",(0,a.jsx)(e.li,{children:"Connect your wallet or enter address"}),"\n",(0,a.jsx)(e.li,{children:"Request testnet ETH (up to 0.5 ETH per day)"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Option 3: Discord Faucet"})}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["Join the ",(0,a.jsx)(e.a,{href:"https://discord.gg/buildonbase",children:"Base Discord"})]}),"\n",(0,a.jsxs)(e.li,{children:["Use the ",(0,a.jsx)(e.code,{children:"!faucet YOUR_ADDRESS"})," command in #faucet channel"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"automated-faucet-integration",children:"Automated Faucet Integration"}),"\n",(0,a.jsx)(e.p,{children:"Integrate faucet requests into your development workflow:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"class TestnetManager {\n  async ensureFunding(agentId: string, minimumBalance: string = \"0.1\") {\n    const agent = new PayStablAgent({ agentId, network: \"base-sepolia\" });\n    const balance = await agent.getBalance();\n    \n    if (parseFloat(balance.eth) < parseFloat(minimumBalance)) {\n      console.log(`Agent ${agentId} needs funding. Current balance: ${balance.eth} ETH`);\n      \n      // Request from faucet\n      const wallet = await agent.getWallet();\n      await this.requestFaucetFunds(wallet.address);\n      \n      // Wait for funding to arrive\n      await this.waitForFunding(agentId, minimumBalance);\n    }\n  }\n  \n  async requestFaucetFunds(address: string): Promise<void> {\n    try {\n      const response = await fetch('https://faucet.quicknode.com/base/sepolia', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ address, amount: \"0.5\" })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Faucet request failed: ${response.statusText}`);\n      }\n      \n      console.log(`Faucet request successful for ${address}`);\n    } catch (error) {\n      console.error('Faucet request failed:', error.message);\n      console.log('Please manually request funds from https://faucet.quicknode.com/base/sepolia');\n    }\n  }\n  \n  async waitForFunding(agentId: string, targetBalance: string): Promise<void> {\n    const agent = new PayStablAgent({ agentId, network: \"base-sepolia\" });\n    const maxWaitTime = 60000; // 1 minute\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < maxWaitTime) {\n      const balance = await agent.getBalance();\n      \n      if (parseFloat(balance.eth) >= parseFloat(targetBalance)) {\n        console.log(`Funding received! New balance: ${balance.eth} ETH`);\n        return;\n      }\n      \n      console.log(`Waiting for funding... Current: ${balance.eth} ETH`);\n      await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds\n    }\n    \n    throw new Error('Funding timeout - please check faucet request');\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"development-environment-setup",children:"Development Environment Setup"}),"\n",(0,a.jsx)(e.h3,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,a.jsx)(e.p,{children:"Set up environment variables for testnet development:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:'# .env.development\nPAYSTABL_API_KEY=your_testnet_api_key\nPAYSTABL_NETWORK=base-sepolia\nPAYSTABL_DEBUG=true\n\n# Agent configuration\nAGENT_ID=dev_agent_001\nAGENT_NAME="Development Agent"\n\n# Testnet settings\nTESTNET_FAUCET_URL=https://faucet.quicknode.com/base/sepolia\nTESTNET_EXPLORER=https://sepolia.basescan.org\n'})}),"\n",(0,a.jsx)(e.h3,{id:"development-scripts",children:"Development Scripts"}),"\n",(0,a.jsx)(e.p,{children:"Useful scripts for testnet development:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "scripts": {\n    "dev:testnet": "NODE_ENV=development npm run start",\n    "test:agent": "node scripts/test-agent.js",\n    "fund:agent": "node scripts/fund-agent.js",\n    "check:balance": "node scripts/check-balance.js",\n    "deploy:testnet": "node scripts/deploy-testnet.js"\n  }\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"test-agent.js:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const { PayStablAgent } = require('@paystabl/sdk');\n\nasync function testAgent() {\n  const agent = new PayStablAgent({\n    agentId: \"test_agent_dev\",\n    network: \"base-sepolia\"\n  });\n  \n  // Test basic functionality\n  console.log('Testing agent wallet...');\n  const balance = await agent.getBalance();\n  console.log(`Balance: ${balance.eth} ETH`);\n  \n  // Test API payment\n  console.log('Testing API payment...');\n  try {\n    const payment = await agent.pay_api_endpoint({\n      url: \"https://test-402-api.paystabl.com/test-endpoint\",\n      method: \"GET\"\n    });\n    console.log('API payment successful:', payment.receipt.txHash);\n  } catch (error) {\n    console.error('API payment failed:', error.message);\n  }\n  \n  // Test agent payment\n  console.log('Testing agent payment...');\n  try {\n    const payment = await agent.pay_agent({\n      fromAgentId: \"test_agent_dev\",\n      toAgentId: \"test_recipient_agent\",\n      amount: \"0.01\",\n      purpose: \"Development test\"\n    });\n    console.log('Agent payment successful:', payment.txHash);\n  } catch (error) {\n    console.error('Agent payment failed:', error.message);\n  }\n}\n\ntestAgent().catch(console.error);\n"})}),"\n",(0,a.jsx)(e.h2,{id:"testing-scenarios",children:"Testing Scenarios"}),"\n",(0,a.jsx)(e.h3,{id:"api-payment-testing",children:"API Payment Testing"}),"\n",(0,a.jsx)(e.p,{children:"Test x402 protocol handling with test APIs:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"class APIPaymentTester {\n  constructor(agentId) {\n    this.agent = new PayStablAgent({\n      agentId,\n      network: \"base-sepolia\"\n    });\n  }\n  \n  async testBasicAPIPayment() {\n    console.log('Testing basic API payment flow...');\n    \n    const testAPI = \"https://test-402-api.paystabl.com/basic-test\";\n    \n    try {\n      // This will trigger a 402 response and handle payment\n      const result = await this.agent.pay_api_endpoint({\n        url: testAPI,\n        method: \"GET\"\n      });\n      \n      console.log('\u2705 Basic API payment successful');\n      console.log('Payment amount:', result.receipt.amount);\n      console.log('Transaction hash:', result.receipt.txHash);\n      \n      return result;\n    } catch (error) {\n      console.error('\u274c Basic API payment failed:', error.message);\n      throw error;\n    }\n  }\n  \n  async testPostAPIPayment() {\n    console.log('Testing POST API payment with data...');\n    \n    const testAPI = \"https://test-402-api.paystabl.com/post-test\";\n    const testData = {\n      query: \"test query\",\n      parameters: { limit: 10 }\n    };\n    \n    try {\n      const result = await this.agent.pay_api_endpoint({\n        url: testAPI,\n        method: \"POST\",\n        data: testData,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      \n      console.log('\u2705 POST API payment successful');\n      return result;\n    } catch (error) {\n      console.error('\u274c POST API payment failed:', error.message);\n      throw error;\n    }\n  }\n  \n  async testErrorHandling() {\n    console.log('Testing payment error handling...');\n    \n    // Test with insufficient funds\n    const expensiveAPI = \"https://test-402-api.paystabl.com/expensive-test\";\n    \n    try {\n      await this.agent.pay_api_endpoint({\n        url: expensiveAPI,\n        method: \"GET\"\n      });\n      \n      console.log('\u26a0\ufe0f Expected error but payment succeeded');\n    } catch (error) {\n      if (error.code === 'INSUFFICIENT_FUNDS') {\n        console.log('\u2705 Insufficient funds error handled correctly');\n      } else {\n        console.error('\u274c Unexpected error:', error.message);\n      }\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"agent-to-agent-testing",children:"Agent-to-Agent Testing"}),"\n",(0,a.jsx)(e.p,{children:"Test payments between different agents:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'class AgentCollaborationTester {\n  constructor() {\n    this.agentA = new PayStablAgent({\n      agentId: "test_agent_a",\n      network: "base-sepolia"\n    });\n    \n    this.agentB = new PayStablAgent({\n      agentId: "test_agent_b", \n      network: "base-sepolia"\n    });\n  }\n  \n  async setupTestAgents() {\n    console.log(\'Setting up test agents...\');\n    \n    // Ensure both agents have funding\n    const balanceA = await this.agentA.getBalance();\n    const balanceB = await this.agentB.getBalance();\n    \n    console.log(`Agent A balance: ${balanceA.eth} ETH`);\n    console.log(`Agent B balance: ${balanceB.eth} ETH`);\n    \n    if (parseFloat(balanceA.eth) < 0.1 || parseFloat(balanceB.eth) < 0.1) {\n      throw new Error(\'Agents need more funding for testing\');\n    }\n  }\n  \n  async testSimplePayment() {\n    console.log(\'Testing simple agent-to-agent payment...\');\n    \n    const initialBalanceB = await this.agentB.getBalance();\n    \n    const payment = await this.agentA.pay_agent({\n      fromAgentId: "test_agent_a",\n      toAgentId: "test_agent_b",\n      amount: "0.05",\n      purpose: "Test payment"\n    });\n    \n    console.log(\'\u2705 Payment sent:\', payment.txHash);\n    \n    // Wait for confirmation\n    await new Promise(resolve => setTimeout(resolve, 5000));\n    \n    const finalBalanceB = await this.agentB.getBalance();\n    const received = parseFloat(finalBalanceB.eth) - parseFloat(initialBalanceB.eth);\n    \n    console.log(`Agent B received: ${received} ETH`);\n    \n    return payment;\n  }\n  \n  async testBatchPayments() {\n    console.log(\'Testing batch payments...\');\n    \n    const payments = await Promise.all([\n      this.agentA.pay_agent({\n        fromAgentId: "test_agent_a",\n        toAgentId: "test_agent_b",\n        amount: "0.01",\n        purpose: "Batch payment 1"\n      }),\n      this.agentA.pay_agent({\n        fromAgentId: "test_agent_a", \n        toAgentId: "test_agent_b",\n        amount: "0.02",\n        purpose: "Batch payment 2"\n      }),\n      this.agentA.pay_agent({\n        fromAgentId: "test_agent_a",\n        toAgentId: "test_agent_b", \n        amount: "0.03",\n        purpose: "Batch payment 3"\n      })\n    ]);\n    \n    console.log(`\u2705 Sent ${payments.length} batch payments`);\n    return payments;\n  }\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"debugging-and-monitoring",children:"Debugging and Monitoring"}),"\n",(0,a.jsx)(e.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,a.jsx)(e.p,{children:"Enable detailed logging for development:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const agent = new PayStablAgent({\n  agentId: \"debug_agent\",\n  network: \"base-sepolia\",\n  debug: true,  // Enable debug logging\n  logLevel: \"verbose\"\n});\n\n// Custom logger\nagent.on('payment_started', (event) => {\n  console.log(`\ud83d\udd04 Payment started: ${event.amount} to ${event.recipient}`);\n});\n\nagent.on('payment_completed', (event) => {\n  console.log(`\u2705 Payment completed: ${event.txHash}`);\n});\n\nagent.on('payment_failed', (event) => {\n  console.error(`\u274c Payment failed: ${event.error}`);\n});\n\nagent.on('policy_check', (event) => {\n  console.log(`\ud83d\udd0d Policy check: ${event.policy} - ${event.result}`);\n});\n"})}),"\n",(0,a.jsx)(e.h3,{id:"transaction-monitoring",children:"Transaction Monitoring"}),"\n",(0,a.jsx)(e.p,{children:"Monitor testnet transactions in real-time:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"class TestnetMonitor {\n  constructor(agentId) {\n    this.agentId = agentId;\n    this.agent = new PayStablAgent({\n      agentId,\n      network: \"base-sepolia\"\n    });\n  }\n  \n  async startMonitoring() {\n    console.log(`Starting monitoring for agent: ${this.agentId}`);\n    \n    // Monitor balance changes\n    setInterval(async () => {\n      const balance = await this.agent.getBalance();\n      console.log(`[${new Date().toISOString()}] Balance: ${balance.eth} ETH`);\n    }, 30000); // Every 30 seconds\n    \n    // Monitor transaction history\n    setInterval(async () => {\n      const recent = await this.agent.getTransactions({\n        limit: 5,\n        since: new Date(Date.now() - 5 * 60 * 1000) // Last 5 minutes\n      });\n      \n      if (recent.length > 0) {\n        console.log(`[${new Date().toISOString()}] Recent transactions:`);\n        recent.forEach(tx => {\n          console.log(`  ${tx.type}: ${tx.amount} - ${tx.status}`);\n        });\n      }\n    }, 60000); // Every minute\n  }\n  \n  async generateReport() {\n    const transactions = await this.agent.getTransactions({\n      limit: 100,\n      since: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours\n    });\n    \n    const report = {\n      agentId: this.agentId,\n      period: \"24h\",\n      totalTransactions: transactions.length,\n      successfulTransactions: transactions.filter(tx => tx.status === 'completed').length,\n      failedTransactions: transactions.filter(tx => tx.status === 'failed').length,\n      totalVolume: transactions.reduce((sum, tx) => sum + parseFloat(tx.amount), 0),\n      averageAmount: transactions.length > 0 ? \n        transactions.reduce((sum, tx) => sum + parseFloat(tx.amount), 0) / transactions.length : 0,\n      generatedAt: new Date().toISOString()\n    };\n    \n    console.log('\ud83d\udcca Agent Activity Report:');\n    console.log(JSON.stringify(report, null, 2));\n    \n    return report;\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"error-tracking",children:"Error Tracking"}),"\n",(0,a.jsx)(e.p,{children:"Track and categorize errors during development:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"class ErrorTracker {\n  constructor() {\n    this.errors = [];\n  }\n  \n  trackError(error, context) {\n    const errorEntry = {\n      timestamp: new Date().toISOString(),\n      error: error.message,\n      code: error.code,\n      context,\n      stack: error.stack\n    };\n    \n    this.errors.push(errorEntry);\n    \n    // Categorize error\n    const category = this.categorizeError(error);\n    console.error(`[${category}] ${error.message}`);\n    \n    // Suggest fix\n    const suggestion = this.suggestFix(error);\n    if (suggestion) {\n      console.log(`\ud83d\udca1 Suggestion: ${suggestion}`);\n    }\n  }\n  \n  categorizeError(error) {\n    if (error.code === 'INSUFFICIENT_FUNDS') return 'FUNDING';\n    if (error.code === 'NETWORK_ERROR') return 'NETWORK';\n    if (error.code === 'POLICY_VIOLATION') return 'POLICY';\n    if (error.code === 'INVALID_SIGNATURE') return 'AUTH';\n    return 'UNKNOWN';\n  }\n  \n  suggestFix(error) {\n    switch (error.code) {\n      case 'INSUFFICIENT_FUNDS':\n        return 'Request funds from the testnet faucet: https://faucet.quicknode.com/base/sepolia';\n      case 'NETWORK_ERROR':\n        return 'Check your internet connection and RPC endpoint configuration';\n      case 'POLICY_VIOLATION':\n        return 'Review your agent policies and spending limits';\n      case 'INVALID_SIGNATURE':\n        return 'Verify your API key and agent configuration';\n      default:\n        return null;\n    }\n  }\n  \n  generateErrorReport() {\n    const summary = this.errors.reduce((acc, error) => {\n      const category = this.categorizeError(error);\n      acc[category] = (acc[category] || 0) + 1;\n      return acc;\n    }, {});\n    \n    console.log('\ud83d\udea8 Error Summary:');\n    console.log(JSON.stringify(summary, null, 2));\n    \n    return {\n      totalErrors: this.errors.length,\n      errorsByCategory: summary,\n      recentErrors: this.errors.slice(-10)\n    };\n  }\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(e.h3,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,a.jsx)(e.p,{children:"Recommended workflow for testnet development:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Setup Phase"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Install dependencies\nnpm install @paystabl/sdk\n\n# Set up environment\ncp .env.example .env.development\n# Edit .env.development with testnet settings\n\n# Fund test agents\nnpm run fund:agent\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Development Phase"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Start development with hot reload\nnpm run dev:testnet\n\n# Run continuous tests\nnpm run test:watch\n\n# Monitor agent activity\nnpm run monitor:agent\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Testing Phase"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Run full test suite\nnpm run test:integration\n\n# Test specific scenarios\nnpm run test:api-payments\nnpm run test:agent-payments\nnpm run test:error-handling\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Debugging Phase"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"# Enable debug mode\nexport PAYSTABL_DEBUG=true\n\n# Check logs\nnpm run logs:agent\n\n# Generate reports\nnpm run report:errors\nnpm run report:activity\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,a.jsx)(e.p,{children:"Manage testnet resources efficiently:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'class ResourceManager {\n  constructor() {\n    this.agents = new Map();\n    this.cleanupInterval = null;\n  }\n  \n  async createTestAgent(agentId, config = {}) {\n    const agent = new PayStablAgent({\n      agentId,\n      network: "base-sepolia",\n      ...config\n    });\n    \n    // Ensure funding\n    await this.ensureFunding(agent);\n    \n    // Set reasonable policies for testing\n    await agent.configurePolicies({\n      dailyLimit: "1.0",        // 1 ETH daily limit\n      perCallLimit: "0.1",      // 0.1 ETH per transaction\n      allowedDomains: [\n        "test-402-api.paystabl.com",\n        "localhost:3000",\n        "staging-api.example.com"\n      ]\n    });\n    \n    this.agents.set(agentId, agent);\n    return agent;\n  }\n  \n  async ensureFunding(agent, minimumBalance = "0.1") {\n    const balance = await agent.getBalance();\n    \n    if (parseFloat(balance.eth) < parseFloat(minimumBalance)) {\n      console.log(`Requesting funds for agent...`);\n      const wallet = await agent.getWallet();\n      await this.requestFaucetFunds(wallet.address);\n    }\n  }\n  \n  async cleanup() {\n    console.log(\'Cleaning up test resources...\');\n    \n    // Check balances and return unused funds if possible\n    for (const [agentId, agent] of this.agents) {\n      const balance = await agent.getBalance();\n      \n      if (parseFloat(balance.eth) > 0.5) {\n        console.log(`Agent ${agentId} has ${balance.eth} ETH remaining`);\n        // Could implement fund return logic here\n      }\n    }\n    \n    this.agents.clear();\n  }\n  \n  startPeriodicCleanup() {\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupExpiredSessions();\n    }, 5 * 60 * 1000); // Every 5 minutes\n  }\n  \n  stopPeriodicCleanup() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,a.jsx)(e.p,{children:"Test performance characteristics on testnet:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'class PerformanceTester {\n  constructor(agentId) {\n    this.agent = new PayStablAgent({\n      agentId,\n      network: "base-sepolia"\n    });\n  }\n  \n  async testTransactionThroughput() {\n    console.log(\'Testing transaction throughput...\');\n    \n    const startTime = Date.now();\n    const batchSize = 10;\n    const batches = 5;\n    \n    for (let batch = 0; batch < batches; batch++) {\n      const batchStart = Date.now();\n      \n      const promises = Array.from({ length: batchSize }, (_, i) =>\n        this.agent.pay_agent({\n          fromAgentId: this.agent.agentId,\n          toAgentId: "test_recipient_agent",\n          amount: "0.001",\n          purpose: `Throughput test batch ${batch} tx ${i}`\n        })\n      );\n      \n      await Promise.all(promises);\n      \n      const batchTime = Date.now() - batchStart;\n      console.log(`Batch ${batch + 1}: ${batchSize} transactions in ${batchTime}ms`);\n    }\n    \n    const totalTime = Date.now() - startTime;\n    const totalTransactions = batchSize * batches;\n    const tps = totalTransactions / (totalTime / 1000);\n    \n    console.log(`\\n\ud83d\udcca Performance Results:`);\n    console.log(`Total transactions: ${totalTransactions}`);\n    console.log(`Total time: ${totalTime}ms`);\n    console.log(`Transactions per second: ${tps.toFixed(2)}`);\n    \n    return { totalTransactions, totalTime, tps };\n  }\n  \n  async testAPIPaymentLatency() {\n    console.log(\'Testing API payment latency...\');\n    \n    const iterations = 20;\n    const latencies = [];\n    \n    for (let i = 0; i < iterations; i++) {\n      const start = Date.now();\n      \n      try {\n        await this.agent.pay_api_endpoint({\n          url: "https://test-402-api.paystabl.com/latency-test",\n          method: "GET"\n        });\n        \n        const latency = Date.now() - start;\n        latencies.push(latency);\n        console.log(`Request ${i + 1}: ${latency}ms`);\n        \n      } catch (error) {\n        console.error(`Request ${i + 1} failed:`, error.message);\n      }\n      \n      // Small delay between requests\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    \n    const avgLatency = latencies.reduce((sum, l) => sum + l, 0) / latencies.length;\n    const minLatency = Math.min(...latencies);\n    const maxLatency = Math.max(...latencies);\n    \n    console.log(`\\n\ud83d\udcca Latency Results:`);\n    console.log(`Average: ${avgLatency.toFixed(2)}ms`);\n    console.log(`Min: ${minLatency}ms`);\n    console.log(`Max: ${maxLatency}ms`);\n    \n    return { average: avgLatency, min: minLatency, max: maxLatency };\n  }\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"transition-to-production",children:"Transition to Production"}),"\n",(0,a.jsx)(e.h3,{id:"pre-production-checklist",children:"Pre-production Checklist"}),"\n",(0,a.jsx)(e.p,{children:"Before moving to mainnet:"}),"\n",(0,a.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","All tests pass on testnet"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Performance requirements met"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Security policies configured"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Error handling tested"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Monitoring and alerting set up"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Backup and recovery procedures tested"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Documentation updated"]}),"\n",(0,a.jsxs)(e.li,{className:"task-list-item",children:[(0,a.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Team training completed"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"configuration-changes",children:"Configuration Changes"}),"\n",(0,a.jsx)(e.p,{children:"Update configuration for production:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'// Change network configuration\nconst agent = new PayStablAgent({\n  agentId: "production_agent",\n  network: "base-mainnet",  // Switch to mainnet\n  apiKey: process.env.PAYSTABL_PROD_API_KEY\n});\n\n// Update policies for production\nawait agent.configurePolicies({\n  dailyLimit: "100.00",      // Higher limits for production\n  perCallLimit: "10.00",\n  allowedDomains: [\n    "api.production-service.com",\n    "trusted-partner.io"\n  ],\n  requireApproval: {\n    threshold: "50.00"        // Require approval for large amounts\n  }\n});\n'})}),"\n",(0,a.jsx)(e.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/docs/quickstart",children:"Quickstart Guide"})," - Basic setup instructions"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/docs/security",children:"Security Guide"})," - Security best practices"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/docs/integrations/mcp",children:"Integration Guides"})," - Framework integrations"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.a,{href:"/docs/architecture",children:"Architecture"})," - System architecture overview"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"support",children:"Support"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://discord.gg/paystabl",children:"Discord #testnet Channel"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://github.com/paystabl/sdk/issues",children:"GitHub Issues"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"mailto:support@paystabl.com",children:"Email Support"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"https://status.paystabl.com/testnet",children:"Testnet Status"})}),"\n"]})]})}function g(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>i});var s=t(6540);const a={},r=s.createContext(a);function o(n){const e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);