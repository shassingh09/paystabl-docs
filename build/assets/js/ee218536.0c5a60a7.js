"use strict";(self.webpackChunkpaystabl_docs=self.webpackChunkpaystabl_docs||[]).push([[160],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},9442:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"reference/x402_headers","title":"x402 Headers Reference","description":"The x402 protocol defines a standard HTTP status code and header structure for payment-required API endpoints. This reference covers the complete specification, validation rules, and implementation details for x402-enabled services.","source":"@site/docs/reference/x402_headers.mdx","sourceDirName":"reference","slug":"/reference/x402_headers","permalink":"/reference/x402_headers","draft":false,"unlisted":false,"editUrl":"https://github.com/paystabl/docs/tree/main/docs/reference/x402_headers.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udee0\ufe0f Tool: pay_api_endpoint","permalink":"/tools/pay_api_endpoint"},"next":{"title":"Security Guide","permalink":"/security"}}');var a=t(4848),s=t(8453);const i={},d="x402 Headers Reference",c={},l=[{value:"Overview",id:"overview",level:2},{value:"HTTP 402 Response Structure",id:"http-402-response-structure",level:2},{value:"Status Code",id:"status-code",level:3},{value:"Required Headers",id:"required-headers",level:3},{value:"<code>Accept-Payment</code>",id:"accept-payment",level:4},{value:"<code>Payment-Amount</code>",id:"payment-amount",level:4},{value:"<code>Payment-Purpose</code>",id:"payment-purpose",level:4},{value:"<code>Payment-Expires</code>",id:"payment-expires",level:4},{value:"Optional Headers",id:"optional-headers",level:3},{value:"<code>Payment-Receipt-Required</code>",id:"payment-receipt-required",level:4},{value:"<code>Payment-Callback</code>",id:"payment-callback",level:4},{value:"<code>Payment-Metadata</code>",id:"payment-metadata",level:4},{value:"Complete x402 Response Example",id:"complete-x402-response-example",level:2},{value:"Payment Request Headers",id:"payment-request-headers",level:2},{value:"<code>X-Payment</code>",id:"x-payment",level:3},{value:"<code>X-Payment-Receipt</code>",id:"x-payment-receipt",level:3},{value:"Validation Rules",id:"validation-rules",level:2},{value:"Server-Side Validation",id:"server-side-validation",level:3},{value:"Client-Side Implementation",id:"client-side-implementation",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Error Response Format",id:"error-response-format",level:3},{value:"Common Error Codes",id:"common-error-codes",level:3},{value:"Error Handling Implementation",id:"error-handling-implementation",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Payment Verification",id:"payment-verification",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"Express.js Middleware",id:"expressjs-middleware",level:3},{value:"FastAPI Implementation",id:"fastapi-implementation",level:3},{value:"Testing x402 Implementation",id:"testing-x402-implementation",level:2},{value:"Test Server",id:"test-server",level:3},{value:"Client Testing",id:"client-testing",level:3},{value:"Related Documentation",id:"related-documentation",level:2},{value:"External Resources",id:"external-resources",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"x402-headers-reference",children:"x402 Headers Reference"})}),"\n",(0,a.jsx)(n.p,{children:"The x402 protocol defines a standard HTTP status code and header structure for payment-required API endpoints. This reference covers the complete specification, validation rules, and implementation details for x402-enabled services."}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(n.p,{children:["The x402 protocol extends HTTP with a standardized way to request payments for API access. When a client requests a paid resource, the server responds with status ",(0,a.jsx)(n.code,{children:"402 Payment Required"})," and includes payment details in headers."]}),"\n",(0,a.jsx)(n.h2,{id:"http-402-response-structure",children:"HTTP 402 Response Structure"}),"\n",(0,a.jsx)(n.h3,{id:"status-code",children:"Status Code"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"HTTP/1.1 402 Payment Required\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"402 Payment Required"})," status code indicates that payment is required to access the requested resource."]}),"\n",(0,a.jsx)(n.h3,{id:"required-headers",children:"Required Headers"}),"\n",(0,a.jsx)(n.h4,{id:"accept-payment",children:(0,a.jsx)(n.code,{children:"Accept-Payment"})}),"\n",(0,a.jsx)(n.p,{children:"Specifies the accepted payment methods and details:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"Accept-Payment: bitcoin lightning=lnbc1..., ethereum address=0x123..., paystabl agent=required\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Format:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Accept-Payment: <method1> <param1>=<value1> <param2>=<value2>, <method2> <param1>=<value1>\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Supported Payment Methods:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"bitcoin"})," - Bitcoin payments with lightning network support"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ethereum"})," - Ethereum-based payments"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"paystabl"})," - PayStabl agent payments (recommended)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"stripe"})," - Traditional card payments"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"payment-amount",children:(0,a.jsx)(n.code,{children:"Payment-Amount"})}),"\n",(0,a.jsx)(n.p,{children:"Specifies the payment amount and currency:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"Payment-Amount: amount=2.50 currency=USD\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Format:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Payment-Amount: amount=<decimal> currency=<ISO-4217-code>\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"Payment-Amount: amount=1.00 currency=USD\nPayment-Amount: amount=0.001 currency=BTC\nPayment-Amount: amount=5.50 currency=EUR\n"})}),"\n",(0,a.jsx)(n.h4,{id:"payment-purpose",children:(0,a.jsx)(n.code,{children:"Payment-Purpose"})}),"\n",(0,a.jsx)(n.p,{children:"Describes what the payment is for:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"Payment-Purpose: Premium API access for data analysis\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Format:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Payment-Purpose: <human-readable-description>\n"})}),"\n",(0,a.jsx)(n.h4,{id:"payment-expires",children:(0,a.jsx)(n.code,{children:"Payment-Expires"})}),"\n",(0,a.jsx)(n.p,{children:"Specifies when the payment offer expires:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"Payment-Expires: Mon, 15 Jan 2024 10:30:00 GMT\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Format:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Payment-Expires: <HTTP-date>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"optional-headers",children:"Optional Headers"}),"\n",(0,a.jsx)(n.h4,{id:"payment-receipt-required",children:(0,a.jsx)(n.code,{children:"Payment-Receipt-Required"})}),"\n",(0,a.jsx)(n.p,{children:"Indicates if a payment receipt should be included in subsequent requests:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"Payment-Receipt-Required: true\n"})}),"\n",(0,a.jsx)(n.h4,{id:"payment-callback",children:(0,a.jsx)(n.code,{children:"Payment-Callback"})}),"\n",(0,a.jsx)(n.p,{children:"Webhook URL for payment notifications:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"Payment-Callback: https://api.example.com/payment-webhook\n"})}),"\n",(0,a.jsx)(n.h4,{id:"payment-metadata",children:(0,a.jsx)(n.code,{children:"Payment-Metadata"})}),"\n",(0,a.jsx)(n.p,{children:"Additional metadata about the payment:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"Payment-Metadata: endpoint=/premium-data, rate-limit=100req/hour\n"})}),"\n",(0,a.jsx)(n.h2,{id:"complete-x402-response-example",children:"Complete x402 Response Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'HTTP/1.1 402 Payment Required\nContent-Type: application/json\nAccept-Payment: paystabl agent=required, bitcoin lightning=lnbc1..., ethereum address=0x123...\nPayment-Amount: amount=2.50 currency=USD\nPayment-Purpose: Premium weather data access\nPayment-Expires: Mon, 15 Jan 2024 10:30:00 GMT\nPayment-Receipt-Required: true\nPayment-Callback: https://weather-api.com/webhook/payment\nPayment-Metadata: endpoint=/weather/premium, rate=hourly\n\n{\n  "error": "payment_required",\n  "message": "Payment of $2.50 required for premium weather data",\n  "payment": {\n    "amount": "2.50",\n    "currency": "USD",\n    "methods": [\n      {\n        "type": "paystabl",\n        "agent_required": true,\n        "processor": "paystabl.com"\n      },\n      {\n        "type": "bitcoin",\n        "lightning_invoice": "lnbc25000n1...",\n        "address": "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh"\n      },\n      {\n        "type": "ethereum", \n        "address": "0x742dC8a3d5b5A7c8e4A6D8B9d2A8F3E7C6B5A4D3",\n        "chain_id": 8453\n      }\n    ],\n    "expires_at": "2024-01-15T10:30:00Z",\n    "payment_id": "pay_abc123def456"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"payment-request-headers",children:"Payment Request Headers"}),"\n",(0,a.jsx)(n.h3,{id:"x-payment",children:(0,a.jsx)(n.code,{children:"X-Payment"})}),"\n",(0,a.jsx)(n.p,{children:"The client includes this header in the retry request after payment:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:"X-Payment: type=paystabl receipt=0x1234... signature=0xabcd...\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"PayStabl Format:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"X-Payment: type=paystabl receipt=<tx-hash> signature=<payment-signature> agent=<agent-id>\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Bitcoin Format:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"X-Payment: type=bitcoin txid=<transaction-id> confirmation=<block-height>\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Ethereum Format:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"X-Payment: type=ethereum txhash=<transaction-hash> amount=<paid-amount>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"x-payment-receipt",children:(0,a.jsx)(n.code,{children:"X-Payment-Receipt"})}),"\n",(0,a.jsx)(n.p,{children:"Optional receipt information for audit purposes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'X-Payment-Receipt: {"amount":"2.50","currency":"USD","timestamp":"2024-01-15T10:25:00Z","agent":"agent_123"}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"validation-rules",children:"Validation Rules"}),"\n",(0,a.jsx)(n.h3,{id:"server-side-validation",children:"Server-Side Validation"}),"\n",(0,a.jsx)(n.p,{children:"Services implementing x402 must validate payment headers:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"interface PaymentValidator {\n  validatePaymentHeader(header: string): Promise<ValidationResult>;\n  verifyPaymentAmount(payment: Payment, required: Amount): boolean;\n  checkPaymentExpiry(payment: Payment): boolean;\n  verifySignature(payment: Payment): Promise<boolean>;\n}\n\nclass X402Validator implements PaymentValidator {\n  async validatePaymentHeader(header: string): Promise<ValidationResult> {\n    // Parse X-Payment header\n    const payment = this.parsePaymentHeader(header);\n    \n    // Validate format\n    if (!this.isValidFormat(payment)) {\n      return {\n        valid: false,\n        error: \"Invalid payment header format\",\n        code: \"INVALID_FORMAT\"\n      };\n    }\n    \n    // Verify payment on blockchain\n    const verified = await this.verifyPaymentOnChain(payment);\n    if (!verified) {\n      return {\n        valid: false,\n        error: \"Payment not found or invalid\",\n        code: \"PAYMENT_NOT_FOUND\"\n      };\n    }\n    \n    // Check amount matches\n    const amountValid = this.verifyPaymentAmount(payment, this.requiredAmount);\n    if (!amountValid) {\n      return {\n        valid: false,\n        error: \"Payment amount insufficient\",\n        code: \"INSUFFICIENT_AMOUNT\"\n      };\n    }\n    \n    return {\n      valid: true,\n      payment\n    };\n  }\n  \n  private parsePaymentHeader(header: string): Payment {\n    const params = new URLSearchParams(header.replace(/=/g, '&'));\n    \n    return {\n      type: params.get('type'),\n      receipt: params.get('receipt'),\n      signature: params.get('signature'),\n      agent: params.get('agent'),\n      amount: params.get('amount')\n    };\n  }\n  \n  async verifyPaymentOnChain(payment: Payment): Promise<boolean> {\n    switch (payment.type) {\n      case 'paystabl':\n        return await this.verifyPayStablPayment(payment);\n      case 'bitcoin':\n        return await this.verifyBitcoinPayment(payment);\n      case 'ethereum':\n        return await this.verifyEthereumPayment(payment);\n      default:\n        return false;\n    }\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"client-side-implementation",children:"Client-Side Implementation"}),"\n",(0,a.jsx)(n.p,{children:"PayStabl SDK handles x402 responses automatically:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"class X402Handler {\n  async handleX402Response(response: Response): Promise<PaymentHeaders> {\n    // Parse x402 headers\n    const paymentDetails = this.parseX402Headers(response.headers);\n    \n    // Process payment via PayStabl\n    const payment = await this.paystabl.processPayment({\n      amount: paymentDetails.amount,\n      currency: paymentDetails.currency,\n      purpose: paymentDetails.purpose,\n      recipient: paymentDetails.recipient\n    });\n    \n    // Generate payment headers for retry\n    return {\n      'X-Payment': this.formatPaymentHeader(payment),\n      'X-Payment-Receipt': JSON.stringify(payment.receipt)\n    };\n  }\n  \n  private parseX402Headers(headers: Headers): PaymentDetails {\n    const acceptPayment = headers.get('Accept-Payment');\n    const amount = headers.get('Payment-Amount');\n    const purpose = headers.get('Payment-Purpose');\n    const expires = headers.get('Payment-Expires');\n    \n    return {\n      acceptedMethods: this.parseAcceptPayment(acceptPayment),\n      amount: this.parseAmount(amount),\n      purpose,\n      expiresAt: new Date(expires)\n    };\n  }\n  \n  private formatPaymentHeader(payment: PaymentResult): string {\n    return `type=paystabl receipt=${payment.txHash} signature=${payment.signature} agent=${payment.agentId}`;\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.h3,{id:"error-response-format",children:"Error Response Format"}),"\n",(0,a.jsx)(n.p,{children:"When payment validation fails, servers should return appropriate error codes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-http",children:'HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  "error": "payment_invalid",\n  "code": "INSUFFICIENT_AMOUNT",\n  "message": "Payment amount $1.50 is less than required $2.50",\n  "required_amount": "2.50",\n  "received_amount": "1.50",\n  "payment_id": "pay_abc123def456"\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"common-error-codes",children:"Common Error Codes"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Code"}),(0,a.jsx)(n.th,{children:"Description"}),(0,a.jsx)(n.th,{children:"HTTP Status"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"PAYMENT_REQUIRED"})}),(0,a.jsx)(n.td,{children:"Payment needed to access resource"}),(0,a.jsx)(n.td,{children:"402"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"PAYMENT_INVALID"})}),(0,a.jsx)(n.td,{children:"Payment header format invalid"}),(0,a.jsx)(n.td,{children:"400"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"PAYMENT_NOT_FOUND"})}),(0,a.jsx)(n.td,{children:"Payment transaction not found"}),(0,a.jsx)(n.td,{children:"400"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"INSUFFICIENT_AMOUNT"})}),(0,a.jsx)(n.td,{children:"Payment amount too low"}),(0,a.jsx)(n.td,{children:"400"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"PAYMENT_EXPIRED"})}),(0,a.jsx)(n.td,{children:"Payment offer has expired"}),(0,a.jsx)(n.td,{children:"400"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"PAYMENT_ALREADY_USED"})}),(0,a.jsx)(n.td,{children:"Payment already consumed"}),(0,a.jsx)(n.td,{children:"400"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"UNSUPPORTED_METHOD"})}),(0,a.jsx)(n.td,{children:"Payment method not accepted"}),(0,a.jsx)(n.td,{children:"400"})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"error-handling-implementation",children:"Error Handling Implementation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'class PaymentErrorHandler {\n  handlePaymentError(error: PaymentError): ErrorResponse {\n    switch (error.code) {\n      case \'INSUFFICIENT_AMOUNT\':\n        return {\n          status: 400,\n          error: "payment_invalid",\n          code: error.code,\n          message: `Payment amount ${error.receivedAmount} is less than required ${error.requiredAmount}`,\n          required_amount: error.requiredAmount,\n          received_amount: error.receivedAmount\n        };\n        \n      case \'PAYMENT_EXPIRED\':\n        return {\n          status: 400,\n          error: "payment_expired",\n          code: error.code,\n          message: "Payment offer has expired, please request a new payment",\n          expired_at: error.expiredAt,\n          current_time: new Date().toISOString()\n        };\n        \n      case \'PAYMENT_NOT_FOUND\':\n        return {\n          status: 400,\n          error: "payment_not_found",\n          code: error.code,\n          message: "Payment transaction not found on blockchain",\n          payment_id: error.paymentId\n        };\n        \n      default:\n        return {\n          status: 500,\n          error: "payment_processing_error",\n          code: "UNKNOWN_ERROR",\n          message: "An error occurred processing the payment"\n        };\n    }\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,a.jsx)(n.h3,{id:"payment-verification",children:"Payment Verification"}),"\n",(0,a.jsx)(n.p,{children:"Always verify payments on-chain:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"class SecurePaymentVerification {\n  async verifyPayment(payment: Payment): Promise<VerificationResult> {\n    // Check signature authenticity\n    const signatureValid = await this.verifySignature(payment);\n    if (!signatureValid) {\n      throw new Error('Invalid payment signature');\n    }\n    \n    // Verify transaction on blockchain\n    const txExists = await this.verifyTransactionExists(payment.receipt);\n    if (!txExists) {\n      throw new Error('Payment transaction not found');\n    }\n    \n    // Check amount and recipient\n    const txDetails = await this.getTransactionDetails(payment.receipt);\n    if (txDetails.amount < this.requiredAmount) {\n      throw new Error('Insufficient payment amount');\n    }\n    \n    if (txDetails.recipient !== this.paymentAddress) {\n      throw new Error('Payment sent to wrong address');\n    }\n    \n    // Check payment hasn't been used before\n    const alreadyUsed = await this.checkPaymentUsed(payment.receipt);\n    if (alreadyUsed) {\n      throw new Error('Payment already consumed');\n    }\n    \n    // Mark payment as used\n    await this.markPaymentUsed(payment.receipt);\n    \n    return {\n      valid: true,\n      amount: txDetails.amount,\n      timestamp: txDetails.timestamp\n    };\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,a.jsx)(n.p,{children:"Implement rate limiting for payment requests:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"class PaymentRateLimit {\n  private attempts: Map<string, number> = new Map();\n  \n  async checkRateLimit(clientId: string): Promise<boolean> {\n    const key = `payment_attempts:${clientId}`;\n    const attempts = this.attempts.get(key) || 0;\n    \n    if (attempts >= 10) { // Max 10 payment attempts per hour\n      return false;\n    }\n    \n    this.attempts.set(key, attempts + 1);\n    \n    // Reset counter after 1 hour\n    setTimeout(() => {\n      this.attempts.delete(key);\n    }, 60 * 60 * 1000);\n    \n    return true;\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,a.jsx)(n.h3,{id:"expressjs-middleware",children:"Express.js Middleware"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import express from 'express';\n\nconst x402Middleware = (requiredAmount: string, currency: string = 'USD') => {\n  return async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    const paymentHeader = req.headers['x-payment'] as string;\n    \n    if (!paymentHeader) {\n      // Return 402 with payment requirements\n      res.status(402)\n        .set({\n          'Accept-Payment': 'paystabl agent=required, bitcoin lightning=optional',\n          'Payment-Amount': `amount=${requiredAmount} currency=${currency}`,\n          'Payment-Purpose': 'API access fee',\n          'Payment-Expires': new Date(Date.now() + 15 * 60 * 1000).toUTCString()\n        })\n        .json({\n          error: 'payment_required',\n          message: `Payment of ${requiredAmount} ${currency} required`,\n          payment: {\n            amount: requiredAmount,\n            currency,\n            methods: ['paystabl', 'bitcoin'],\n            expires_in: 900 // 15 minutes\n          }\n        });\n      return;\n    }\n    \n    // Validate payment\n    try {\n      const validator = new X402Validator();\n      const result = await validator.validatePaymentHeader(paymentHeader);\n      \n      if (!result.valid) {\n        return res.status(400).json({\n          error: 'payment_invalid',\n          code: result.code,\n          message: result.error\n        });\n      }\n      \n      // Payment valid, continue to API\n      req.payment = result.payment;\n      next();\n      \n    } catch (error) {\n      res.status(500).json({\n        error: 'payment_processing_error',\n        message: 'Error validating payment'\n      });\n    }\n  };\n};\n\n// Usage\napp.get('/premium-data', x402Middleware('2.50'), (req, res) => {\n  res.json({\n    data: 'Premium content',\n    payment: req.payment\n  });\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"fastapi-implementation",children:"FastAPI Implementation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, HTTPException, Header, Depends\nfrom typing import Optional\nimport time\n\napp = FastAPI()\n\nclass X402Handler:\n    def __init__(self, amount: str, currency: str = "USD"):\n        self.amount = amount\n        self.currency = currency\n        \n    def require_payment(self, x_payment: Optional[str] = Header(None)):\n        if not x_payment:\n            raise HTTPException(\n                status_code=402,\n                detail={\n                    "error": "payment_required",\n                    "message": f"Payment of {self.amount} {self.currency} required",\n                    "payment": {\n                        "amount": self.amount,\n                        "currency": self.currency,\n                        "methods": ["paystabl", "bitcoin"]\n                    }\n                },\n                headers={\n                    "Accept-Payment": "paystabl agent=required, bitcoin lightning=optional",\n                    "Payment-Amount": f"amount={self.amount} currency={self.currency}",\n                    "Payment-Purpose": "API access fee"\n                }\n            )\n            \n        # Validate payment here\n        payment = self.validate_payment(x_payment)\n        return payment\n    \n    def validate_payment(self, payment_header: str):\n        # Implementation depends on payment method\n        # This is a simplified example\n        return {"valid": True, "amount": self.amount}\n\n# Usage\npayment_handler = X402Handler("2.50")\n\n@app.get("/premium-endpoint")\nasync def premium_endpoint(payment = Depends(payment_handler.require_payment)):\n    return {\n        "data": "Premium content",\n        "payment_validated": True\n    }\n'})}),"\n",(0,a.jsx)(n.h2,{id:"testing-x402-implementation",children:"Testing x402 Implementation"}),"\n",(0,a.jsx)(n.h3,{id:"test-server",children:"Test Server"}),"\n",(0,a.jsx)(n.p,{children:"Create a test server for x402 development:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import express from 'express';\n\nconst app = express();\n\n// Test endpoint that always requires payment\napp.get('/test-payment', (req, res) => {\n  const paymentHeader = req.headers['x-payment'];\n  \n  if (!paymentHeader) {\n    return res.status(402)\n      .set({\n        'Accept-Payment': 'paystabl agent=required',\n        'Payment-Amount': 'amount=1.00 currency=USD',\n        'Payment-Purpose': 'Test payment for development'\n      })\n      .json({\n        error: 'payment_required',\n        message: 'Test payment required'\n      });\n  }\n  \n  // For testing, accept any payment header\n  res.json({\n    success: true,\n    message: 'Payment accepted',\n    test_data: {\n      timestamp: new Date().toISOString(),\n      random: Math.random()\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('x402 test server running on port 3000');\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"client-testing",children:"Client Testing"}),"\n",(0,a.jsx)(n.p,{children:"Test x402 handling with curl:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Test 402 response\ncurl -v http://localhost:3000/test-payment\n\n# Test with payment header  \ncurl -v http://localhost:3000/test-payment \\\n  -H "X-Payment: type=paystabl receipt=0x123 agent=test_agent"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/tools/pay_api_endpoint",children:"PayStabl API Tools"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/architecture",children:"Architecture Overview"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/security",children:"Security Guide"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/examples/claude_demo",children:"Integration Examples"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"external-resources",children:"External Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc7231#section-6.5.2",children:"HTTP Status Code 402"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://paystabl.com/protocol",children:"PayStabl Protocol Specification"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki",children:"Bitcoin Payment Protocol"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-681",children:"Ethereum Payment Standards"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}}}]);